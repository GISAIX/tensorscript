[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/classification.mjs",
    "content": "import { BaseNeuralNetwork, } from './deep_learning';\r\n\r\n/**\r\n * Deep Learning Classification with Tensorflow\r\n * @class DeepLearningClassification\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class DeepLearningClassification extends BaseNeuralNetwork{\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      compile: {\r\n        loss: 'categoricalCrossentropy',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow classification model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    this.yShape = yShape;\r\n    this.xShape = xShape;\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else {\r\n      denseLayers.push({ units: (xShape[ 1 ] * 2), inputDim: xShape[1],  activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], activation: 'softmax', });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/classification.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "DeepLearningClassification",
    "memberof": "lib/classification.mjs",
    "static": true,
    "longname": "lib/classification.mjs~DeepLearningClassification",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/classification.mjs",
    "importStyle": "{DeepLearningClassification}",
    "description": "Deep Learning Classification with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DeepLearningClassification"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deep_learning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow classification model",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "override": true
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#layers",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "lib/deep_learning.mjs",
    "content": "import { TensorScriptModelInterface, } from './model_interface';\r\n\r\n/**\r\n * Deep Learning with Tensorflow\r\n * @class BaseNeuralNetwork\r\n * @implements {TensorScriptModelInterface}\r\n */\r\nexport class BaseNeuralNetwork extends TensorScriptModelInterface {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow model\r\n   * @abstract \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    throw new ReferenceError('generateLayers method is not implemented');\r\n  }\r\n  /**\r\n   * Asynchronously trains tensorflow model\r\n   * @override\r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - array of model dense layer parameters\r\n   * @param {Array<Array<number>>} x_text - validation data independent variables\r\n   * @param {Array<Array<number>>} y_text - validation data dependent variables\r\n   * @return {Object} returns trained tensorflow model \r\n   */\r\n  async train(x_matrix, y_matrix, layers, x_test, y_test) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    const xs = this.tf.tensor(x_matrix, xShape);\r\n    const ys = this.tf.tensor(y_matrix, yShape);\r\n    this.xShape = xShape;\r\n    this.yShape = yShape;\r\n    this.model = this.tf.sequential();\r\n    this.generateLayers.call(this, x_matrix, y_matrix, layers || this.layers, x_test, y_test);\r\n    this.model.compile(this.settings.compile);\r\n    await this.model.fit(xs, ys, this.settings.fit);\r\n    xs.dispose();\r\n    ys.dispose();\r\n    return this.model;\r\n  }\r\n  /**\r\n   * Predicts new dependent variables\r\n   * @override\r\n   * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables\r\n   * @param {Object} options - model prediction options\r\n   * @return {{data: Promise}} returns tensorflow prediction \r\n   */\r\n  calculate(input_matrix, options) {\r\n    if (!input_matrix || Array.isArray(input_matrix)===false) throw new Error('invalid input matrix');\r\n    const predictionInput = (Array.isArray(input_matrix[ 0 ]))\r\n      ? input_matrix\r\n      : [\r\n        input_matrix,\r\n      ];\r\n    const predictionTensor = this.tf.tensor(predictionInput);\r\n    const prediction = this.model.predict(predictionTensor, options);\r\n    predictionTensor.dispose();\r\n    return prediction;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/deep_learning.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "class",
    "name": "BaseNeuralNetwork",
    "memberof": "lib/deep_learning.mjs",
    "static": true,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/deep_learning.mjs",
    "importStyle": "{BaseNeuralNetwork}",
    "description": "Deep Learning with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BaseNeuralNetwork"
      }
    ],
    "interface": false,
    "extends": [
      "lib/model_interface.js~TensorScriptModelInterface"
    ],
    "implements": [
      "TensorScriptModelInterface"
    ]
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow model",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "train",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#train",
    "access": "public",
    "description": "Asynchronously trains tensorflow model",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "array of model dense layer parameters"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_text",
        "description": "validation data independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_text",
        "description": "validation data dependent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns trained tensorflow model"
    },
    "override": true
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "model",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#model",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "calculate",
    "memberof": "lib/deep_learning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deep_learning.mjs~BaseNeuralNetwork#calculate",
    "access": "public",
    "description": "Predicts new dependent variables",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "new test independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "model prediction options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{data: Promise}"
      ],
      "spread": false,
      "description": "returns tensorflow prediction"
    },
    "override": true
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "lib/logistic_regression.mjs",
    "content": "import { BaseNeuralNetwork, } from './deep_learning';\r\n\r\n/**\r\n * Logistic Regression Classification with Tensorflow\r\n * @class LogisticRegression\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class LogisticRegression extends BaseNeuralNetwork {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      type:'simple',\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'rmsprop',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow classification model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   * @param {Array<Array<number>>} x_test - validation data independent variables\r\n   * @param {Array<Array<number>>} y_test - validation data dependent variables\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers, x_test, y_test) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    this.yShape = yShape;\r\n    this.xShape = xShape;\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else if (this.settings.type==='class') { \r\n      denseLayers.push({ units: 1, inputDim:  xShape[ 1 ], activation: 'sigmoid', });\r\n      this.settings.compile.loss = 'binaryCrossentropy';\r\n    } else if (this.settings.type === 'l1l2') { \r\n      const kernelRegularizer = this.tf.regularizers.l1l2({ l1: 0.01, l2: 0.01, });\r\n      denseLayers.push({ units: 1, inputDim:  xShape[ 1 ], activation: 'sigmoid', kernelRegularizer, });\r\n      this.settings.compile.loss = 'binaryCrossentropy';\r\n    } else {\r\n      denseLayers.push({ units: 1, inputShape: [xShape[1], ], });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n    /* istanbul ignore next */\r\n    if (x_test && y_test) {\r\n      this.settings.fit.validationData = [x_test, y_test];\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/logistic_regression.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "class",
    "name": "LogisticRegression",
    "memberof": "lib/logistic_regression.mjs",
    "static": true,
    "longname": "lib/logistic_regression.mjs~LogisticRegression",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/logistic_regression.mjs",
    "importStyle": "{LogisticRegression}",
    "description": "Logistic Regression Classification with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LogisticRegression"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deep_learning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/logistic_regression.mjs~LogisticRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/logistic_regression.mjs~LogisticRegression#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/logistic_regression.mjs~LogisticRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/logistic_regression.mjs~LogisticRegression#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow classification model",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_test",
        "description": "validation data independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_test",
        "description": "validation data dependent variables"
      }
    ],
    "override": true
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/logistic_regression.mjs~LogisticRegression",
    "static": false,
    "longname": "lib/logistic_regression.mjs~LogisticRegression#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/logistic_regression.mjs~LogisticRegression",
    "static": false,
    "longname": "lib/logistic_regression.mjs~LogisticRegression#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/logistic_regression.mjs~LogisticRegression",
    "static": false,
    "longname": "lib/logistic_regression.mjs~LogisticRegression#layers",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "lib/lstm_time_series.mjs",
    "content": "import { BaseNeuralNetwork, } from './deep_learning';\r\nimport range from 'lodash.range';\r\n\r\n/**\r\n * Long Short Term Memory Time Series with Tensorflow\r\n * @class LSTMTimeSeries\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class LSTMTimeSeries extends BaseNeuralNetwork {\r\n  /**\r\n   * Creates dataset data\r\n   * @example\r\n   * LSTMTimeSeries.createDataset([ [ 1, ], [ 2, ], [ 3, ], [ 4, ], [ 5, ], [ 6, ], [ 7, ], [ 8, ], [ 9, ], [ 10, ], ], 3) // => \r\n      //  [ \r\n      //    [ \r\n      //      [ [ 1 ], [ 2 ], [ 3 ] ],\r\n      //      [ [ 2 ], [ 3 ], [ 4 ] ],\r\n      //      [ [ 3 ], [ 4 ], [ 5 ] ],\r\n      //      [ [ 4 ], [ 5 ], [ 6 ] ],\r\n      //      [ [ 5 ], [ 6 ], [ 7 ] ],\r\n      //      [ [ 6 ], [ 7 ], [ 8 ] ], \r\n      //   ], //x_matrix\r\n      //   [ [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ] //y_matrix\r\n      // ]\r\n   * @param {Array<Array<number>} dataset - array of values\r\n   * @param {Number} look_back - number of values in each feature \r\n   * @return {[Array<Array<number>>,Array<number>]} returns x matrix and y matrix for model trainning\r\n   */\r\n  /* istanbul ignore next */\r\n  static createDataset(dataset=[], look_back = 1) { \r\n    const dataX = [];\r\n    const dataY = [];\r\n    for (let index in range(dataset.length - look_back - 1)) {\r\n      let i = parseInt(index);\r\n      let a = dataset.slice(i, i + look_back);\r\n      dataX.push(a);\r\n      dataY.push(dataset[ i + look_back ]);\r\n    }\r\n    return [dataX, dataY, ];\r\n  }\r\n  /**\r\n   * Reshape input to be [samples, time steps, features]\r\n   * @example\r\n   * LSTMTimeSeries.getTimeseriesShape([ \r\n      [ [ 1 ], [ 2 ], [ 3 ] ],\r\n      [ [ 2 ], [ 3 ], [ 4 ] ],\r\n      [ [ 3 ], [ 4 ], [ 5 ] ],\r\n      [ [ 4 ], [ 5 ], [ 6 ] ],\r\n      [ [ 5 ], [ 6 ], [ 7 ] ],\r\n      [ [ 6 ], [ 7 ], [ 8 ] ], \r\n    ]) //=> [6, 1, 3,]\r\n   * @param {Array<Array<number>} x_timeseries - dataset array of values\r\n   * @return {Array<Array<number>>} returns proper timeseries forecasting shape\r\n   */\r\n  static getTimeseriesShape(x_timeseries) {\r\n    const time_steps = this.settings.timeSteps;\r\n    const xShape = this.getInputShape(x_timeseries);\r\n    const _samples = xShape[ 0 ];\r\n    const _timeSteps = time_steps;\r\n    const _features = xShape[ 1 ];\r\n    const newShape = (this.settings.mulitpleTimeSteps || this.settings.stateful)\r\n      ? [_samples,  _features, _timeSteps, ]\r\n      : [ _samples, _timeSteps, _features, ];\r\n    // console.log({newShape})\r\n    return newShape;\r\n  }\r\n  /**\r\n   * Returns data for predicting values\r\n   * @param timeseries \r\n   * @param look_back \r\n   */\r\n  static getTimeseriesDataSet(timeseries, look_back) {\r\n    const lookBack = look_back || this.settings.lookBack;\r\n    const matrices = LSTMTimeSeries.createDataset.call(this, timeseries, lookBack);\r\n    const x_matrix = matrices[ 0 ];\r\n    const y_matrix = matrices[ 1 ];\r\n    // const timeseriesShape = LSTMTimeSeries.getTimeseriesShape.call(this,x_matrix);\r\n    const x_matrix_timeseries = BaseNeuralNetwork.reshape(x_matrix, [x_matrix.length, lookBack, ]);\r\n    const xShape = BaseNeuralNetwork.getInputShape(x_matrix_timeseries);\r\n    const yShape = BaseNeuralNetwork.getInputShape(y_matrix);\r\n    return {\r\n      yShape,\r\n      xShape,\r\n      y_matrix,\r\n      x_matrix:x_matrix_timeseries,\r\n    };\r\n  }\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      type: 'simple',\r\n      stateful:false,\r\n      stacked: false,\r\n      mulitpleTimeSteps:false,\r\n      lookBack:1,\r\n      batchSize:1,\r\n      timeSteps:1,\r\n      learningRate:0.1,\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 1,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    this.createDataset = LSTMTimeSeries.createDataset;\r\n    this.getTimeseriesDataSet = LSTMTimeSeries.getTimeseriesDataSet;\r\n    this.getTimeseriesShape = LSTMTimeSeries.getTimeseriesShape;\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow classification model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   * @param {Array<Array<number>>} x_test - validation data independent variables\r\n   * @param {Array<Array<number>>} y_test - validation data dependent variables\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    this.yShape = yShape;\r\n    this.xShape = xShape;\r\n    // const sgdoptimizer = this.tf.train.sgd(this.settings.learningRate);\r\n    const lstmLayers = [];\r\n    const rnnLayers = [];\r\n    const denseLayers = [];\r\n    /* istanbul ignore next */\r\n    if (layers) {\r\n      if(layers.lstmLayers && layers.lstmLayers.length) lstmLayers.push(...layers.lstmLayers);\r\n      if(layers.rnnLayers && layers.rnnLayers.length) rnnLayers.push(...layers.rnnLayers);\r\n      if(layers.denseLayers && layers.denseLayers.length) denseLayers.push(...layers.denseLayers);\r\n    } else if (this.settings.stateful) {\r\n      const batchInputShape = [this.settings.fit.batchSize, this.settings.lookBack, 1, ];\r\n      rnnLayers.push({ units: 4, batchInputShape:batchInputShape,  returnSequences:true, });\r\n      rnnLayers.push({ units: 4, batchInputShape:batchInputShape,  });\r\n      denseLayers.push({ units: yShape[1], });\r\n    // } else if(this.settings.stacked) {\r\n    //   lstmLayers.push({ units: 4, inputShape: [ 1, this.settings.lookBack ], });\r\n    //   // model.add(LSTM(4, batch_input_shape=(batch_size, look_back, 1), stateful=True, return_sequences=True))\r\n    //   // model.add(LSTM(4, batch_input_shape=(batch_size, look_back, 1), stateful=True))\r\n    //   denseLayers.push({ units: yShape[1], });\r\n    } else {\r\n      const inputShape= [1, this.settings.lookBack, ];\r\n      // console.log('default timeseries', { inputShape, xShape, yShape ,  });\r\n      lstmLayers.push({ units:4, inputShape,  });\r\n      denseLayers.push({ units: yShape[1], });\r\n    }\r\n    // console.log('lstmLayers',lstmLayers)\r\n    // console.log('denseLayers',denseLayers)\r\n    if (lstmLayers.length) {\r\n      lstmLayers.forEach(layer => {\r\n        this.model.add(this.tf.layers.lstm(layer));\r\n      });\r\n    }\r\n    if (rnnLayers.length) {\r\n      /* istanbul ignore next */\r\n      rnnLayers.forEach(layer => {\r\n        this.model.add(this.tf.layers.simpleRNN(layer));\r\n      });\r\n    }\r\n    if (denseLayers.length) {\r\n      denseLayers.forEach(layer => {\r\n        this.model.add(this.tf.layers.dense(layer));\r\n      });\r\n    }\r\n    this.layers = {\r\n      lstmLayers,\r\n      rnnLayers,\r\n      denseLayers,\r\n    };\r\n    // this.settings.compile.optimizer = sgdoptimizer;\r\n  }\r\n  async train(x_timeseries, y_timeseries, layers, x_test, y_test) {\r\n    let yShape;\r\n    let x_matrix;\r\n    let y_matrix;\r\n    const look_back = this.settings.lookBack;\r\n    if (y_timeseries) {\r\n      x_matrix = x_timeseries;\r\n      y_matrix = y_timeseries;\r\n    } else {\r\n      const matrices = this.createDataset(x_timeseries, look_back);\r\n      x_matrix = matrices[ 0 ];\r\n      y_matrix = matrices[ 1 ];\r\n      yShape = this.getInputShape(y_matrix);\r\n    }\r\n    //_samples, _timeSteps, _features\r\n    const timeseriesShape = this.getTimeseriesShape(x_matrix);\r\n    const x_matrix_timeseries = BaseNeuralNetwork.reshape(x_matrix, timeseriesShape);\r\n    const xs = this.tf.tensor(x_matrix_timeseries, timeseriesShape);\r\n    const ys = this.tf.tensor(y_matrix, yShape);\r\n    this.xShape = timeseriesShape;\r\n    this.yShape = yShape;\r\n    this.model = this.tf.sequential();\r\n    this.generateLayers.call(this, x_matrix_timeseries, y_matrix, layers || this.layers, x_test, y_test);\r\n    this.model.compile(this.settings.compile);\r\n    if (this.settings.stateful) {\r\n      this.settings.fit.shuffle = false;\r\n    }\r\n    await this.model.fit(xs, ys, this.settings.fit);\r\n    // this.model.summary();\r\n    xs.dispose();\r\n    ys.dispose();\r\n    return this.model;\r\n  }\r\n  calculate(x_matrix) {\r\n    const timeseriesShape = this.getTimeseriesShape(x_matrix);\r\n    const input_matrix = BaseNeuralNetwork.reshape(x_matrix, timeseriesShape);\r\n    return super.calculate(input_matrix);\r\n  }\r\n  async predict(input_matrix, options) {\r\n    if (this.settings.stateful && input_matrix.length > 1) {\r\n      return Promise.all(input_matrix.map(input=>super.predict([input, ], options))) ;\r\n    } else {\r\n      return super.predict(input_matrix, options);\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/lstm_time_series.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "class",
    "name": "LSTMTimeSeries",
    "memberof": "lib/lstm_time_series.mjs",
    "static": true,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/lstm_time_series.mjs",
    "importStyle": "{LSTMTimeSeries}",
    "description": "Long Short Term Memory Time Series with Tensorflow",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LSTMTimeSeries"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deep_learning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "createDataset",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries.createDataset",
    "access": "public",
    "description": "Creates dataset data",
    "examples": [
      "LSTMTimeSeries.createDataset([ [ 1, ], [ 2, ], [ 3, ], [ 4, ], [ 5, ], [ 6, ], [ 7, ], [ 8, ], [ 9, ], [ 10, ], ], 3) // => \n//  [ \n//    [ \n//      [ [ 1 ], [ 2 ], [ 3 ] ],\n//      [ [ 2 ], [ 3 ], [ 4 ] ],\n//      [ [ 3 ], [ 4 ], [ 5 ] ],\n//      [ [ 4 ], [ 5 ], [ 6 ] ],\n//      [ [ 5 ], [ 6 ], [ 7 ] ],\n//      [ [ 6 ], [ 7 ], [ 8 ] ], \n//   ], //x_matrix\n//   [ [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ] //y_matrix\n// ]"
    ],
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "array of values"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "look_back",
        "description": "number of values in each feature"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Array<Array<number>>,Array<number>]"
      ],
      "spread": false,
      "description": "returns x matrix and y matrix for model trainning"
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "getTimeseriesShape",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries.getTimeseriesShape",
    "access": "public",
    "description": "Reshape input to be [samples, time steps, features]",
    "examples": [
      "LSTMTimeSeries.getTimeseriesShape([ \n[ [ 1 ], [ 2 ], [ 3 ] ],\n[ [ 2 ], [ 3 ], [ 4 ] ],\n[ [ 3 ], [ 4 ], [ 5 ] ],\n[ [ 4 ], [ 5 ], [ 6 ] ],\n[ [ 5 ], [ 6 ], [ 7 ] ],\n[ [ 6 ], [ 7 ], [ 8 ] ], \n]) //=> [6, 1, 3,]"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_timeseries",
        "description": "dataset array of values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "returns proper timeseries forecasting shape"
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "getTimeseriesDataSet",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries.getTimeseriesDataSet",
    "access": "public",
    "description": "Returns data for predicting values",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeseries",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "look_back",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 28,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "createDataset",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#createDataset",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "getTimeseriesDataSet",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#getTimeseriesDataSet",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "getTimeseriesShape",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#getTimeseriesShape",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow classification model",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_test",
        "description": "validation data independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_test",
        "description": "validation data dependent variables"
      }
    ],
    "override": true
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#layers",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "train",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#train",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "model",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#model",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "calculate",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#calculate",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "predict",
    "memberof": "lib/lstm_time_series.mjs~LSTMTimeSeries",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/lstm_time_series.mjs~LSTMTimeSeries#predict",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true
  },
  {
    "__docId__": 42,
    "kind": "file",
    "name": "lib/model_interface.mjs",
    "content": "import tf from '@tensorflow/tfjs';\r\n\r\n/**\r\n * Base class for tensorscript models\r\n * @interface TensorScriptModelInterface\r\n * @property {Object} settings - tensorflow model hyperparameters\r\n * @property {Object} model - tensorflow model\r\n * @property {Object} tf - tensorflow / tensorflow-node / tensorflow-node-gpu\r\n * @property {Function} reshape - static reshape array function\r\n * @property {Function} getInputShape - static TensorScriptModelInterface\r\n */\r\nexport class TensorScriptModelInterface {\r\n  /**\r\n   * @param {Object} options - tensorflow model hyperparameters\r\n   * @param {Object} customTF - custom, overridale tensorflow / tensorflow-node / tensorflow-node-gpu\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties = {}) {\r\n    /** @type {Object} */\r\n    this.settings = options;\r\n    /** @type {Object} */\r\n    this.model = properties.model;\r\n    /** @type {Object} */\r\n    this.tf = properties.tf || tf;\r\n    /** @type {Function} */\r\n    this.reshape = TensorScriptModelInterface.reshape;\r\n    /** @type {Function} */\r\n    this.getInputShape = TensorScriptModelInterface.getInputShape;\r\n    return this;\r\n  }\r\n  /**\r\n   * Reshapes an array\r\n   * @function\r\n   * @example \r\n   * const array = [ 0, 1, 1, 0, ];\r\n   * const shape = [2,2];\r\n   * TensorScriptModelInterface.reshape(array,shape) // => \r\n   * [\r\n   *   [ 0, 1, ],\r\n   *   [ 1, 0, ],\r\n   * ];\r\n   * @param {Array<number>} array - input array \r\n   * @param {Array<number>} shape - shape array \r\n   * @return {Array<Array<number>>} returns a matrix with the defined shape\r\n   */\r\n  /* istanbul ignore next */\r\n  static reshape(array, shape) {\r\n    const flatArray = flatten(array);\r\n   \r\n\r\n    function product (arr) {\r\n      return arr.reduce((prev, curr) => prev * curr);\r\n    }\r\n  \r\n    if (!Array.isArray(array) || !Array.isArray(shape)) {\r\n      throw new TypeError('Array expected');\r\n    }\r\n  \r\n    if (shape.length === 0) {\r\n      throw new DimensionError(0, product(size(array)), '!=');\r\n    }\r\n    let newArray;\r\n    let totalSize = 1;\r\n    const rows = shape[ 0 ];\r\n    for (let sizeIndex = 0; sizeIndex < shape.length; sizeIndex++) {\r\n      totalSize *= shape[sizeIndex];\r\n    }\r\n  \r\n    if (flatArray.length !== totalSize) {\r\n      throw new DimensionError(\r\n        product(shape),\r\n        product(size(array)),\r\n        '!='\r\n      );\r\n    }\r\n  \r\n    try {\r\n      newArray = _reshape(flatArray, shape);\r\n    } catch (e) {\r\n      if (e instanceof DimensionError) {\r\n        throw new DimensionError(\r\n          product(shape),\r\n          product(size(array)),\r\n          '!='\r\n        );\r\n      }\r\n      throw e;\r\n    }\r\n    if (newArray.length !== rows) throw new SyntaxError(`specified shape (${shape}) is compatible with input array or length (${array.length})`);\r\n\r\n    // console.log({ newArray ,});\r\n    return newArray;\r\n  }\r\n  /**\r\n   * Returns the shape of an input matrix\r\n   * @function\r\n   * @example \r\n   * const input = [\r\n   *   [ 0, 1, ],\r\n   *   [ 1, 0, ],\r\n   * ];\r\n   * TensorScriptModelInterface.getInputShape(input) // => [2,2]\r\n   * @see {https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array}\r\n   * @param {Array<Array<number>>} matrix - input matrix \r\n   * @return {Array<number>} returns the shape of a matrix (e.g. [2,2])\r\n   */\r\n  static getInputShape(matrix=[]) {\r\n    if (Array.isArray(matrix) === false || !matrix[ 0 ] || !matrix[ 0 ].length || Array.isArray(matrix[ 0 ]) === false) throw new TypeError('input must be a matrix');\r\n    const dim = [];\r\n    const x_dimensions = matrix[ 0 ].length;\r\n    let vectors = matrix;\r\n    matrix.forEach(vector => {\r\n      if (vector.length !== x_dimensions) throw new SyntaxError('input must have the same length in each row');\r\n    });\r\n    for (;;) {\r\n      dim.push(vectors.length);\r\n      if (Array.isArray(vectors[0])) {\r\n        vectors = vectors[0];\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return dim;\r\n  }\r\n  /**\r\n   * Asynchronously trains tensorflow model, must be implemented by tensorscript class\r\n   * @abstract \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @return {Object} returns trained tensorflow model \r\n   */\r\n  train(x_matrix, y_matrix) {\r\n    throw new ReferenceError('train method is not implemented');\r\n  }\r\n  /**\r\n   * Predicts new dependent variables\r\n   * @abstract \r\n   * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables\r\n   * @return {{data: Promise}} returns tensorflow prediction \r\n   */\r\n  calculate(matrix) {\r\n    throw new ReferenceError('calculate method is not implemented');\r\n  }\r\n  /**\r\n   * Loads a saved tensoflow / keras model\r\n   * @param {Object} options - tensorflow load model options\r\n   * @return {Object} tensorflow model\r\n   */\r\n  async loadModel(options) {\r\n    this.model = await this.tf.loadModel(options);\r\n    return this.model;\r\n  }\r\n  /**\r\n   * Returns prediction values from tensorflow model\r\n   * @param {Array<Array<number>>|Array<number>} input_matrix - new test independent variables \r\n   * @param {Boolean} [options.json=true] - return object instead of typed array\r\n   * @param {Boolean} [options.probability=true] - return real values instead of integers\r\n   * @return {Array<number>|Array<Array<number>>} predicted model values\r\n   */\r\n  async predict(input_matrix, options = {}) {\r\n    if (!input_matrix || Array.isArray(input_matrix)===false) throw new Error('invalid input matrix');\r\n    const x_matrix = (Array.isArray(input_matrix[ 0 ]))\r\n      ? input_matrix\r\n      : [\r\n        input_matrix,\r\n      ];\r\n    const config = Object.assign({\r\n      json: true,\r\n      probability: true,\r\n    }, options);\r\n    return this.calculate(x_matrix)\r\n      .data()\r\n      .then(predictions => {\r\n        if (config.json === false) {\r\n          return predictions;\r\n        } else {\r\n          const shape = [x_matrix.length, this.yShape[ 1 ], ];\r\n          const predictionValues = (options.probability === false) ? Array.from(predictions).map(Math.round) : Array.from(predictions);\r\n          return this.reshape(predictionValues, shape);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        throw e; \r\n      });\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate the size of a multi dimensional array.\r\n * This function checks the size of the first entry, it does not validate\r\n * whether all dimensions match. (use function `validate` for that) (from math.js)\r\n * @param {Array} x\r\n * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}\r\n * @ignore\r\n * @return {Number[]} size\r\n */\r\n/* istanbul ignore next */\r\nexport function size (x) {\r\n  let s = [];\r\n\r\n  while (Array.isArray(x)) {\r\n    s.push(x.length);\r\n    x = x[0];\r\n  }\r\n\r\n  return s;\r\n}\r\n/**\r\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions (from math.js)\r\n * @param {Array} array           Array to be reshaped\r\n * @param {Array.<number>} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n * @ignore\r\n * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}\r\n */\r\n/* istanbul ignore next */\r\nexport function _reshape(array, sizes) {\r\n  // testing if there are enough elements for the requested shape\r\n  var tmpArray = array;\r\n  var tmpArray2;\r\n  // for each dimensions starting by the last one and ignoring the first one\r\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\r\n    var size = sizes[sizeIndex];\r\n    tmpArray2 = [];\r\n\r\n    // aggregate the elements of the current tmpArray in elements of the requested size\r\n    var length = tmpArray.length / size;\r\n    for (var i = 0; i < length; i++) {\r\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\r\n    }\r\n    // set it as the new tmpArray for the next loop turn or for return\r\n    tmpArray = tmpArray2;\r\n  }\r\n  return tmpArray;\r\n}\r\n\r\n/**\r\n * Create a range error with the message:\r\n *     'Dimension mismatch (<actual size> != <expected size>)' (from math.js)\r\n * @param {number | number[]} actual        The actual size\r\n * @param {number | number[]} expected      The expected size\r\n * @param {string} [relation='!=']          Optional relation between actual\r\n *                                          and expected size: '!=', '<', etc.\r\n * @extends RangeError\r\n * @ignore\r\n * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}\r\n */\r\n/* istanbul ignore next */\r\nexport class DimensionError extends RangeError {\r\n  constructor(actual, expected, relation) {\r\n    /* istanbul ignore next */\r\n    const message = 'Dimension mismatch (' + (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) + ' ' + ('!=') + ' ' + (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +  ')';\r\n    super(message);\r\n  \r\n    this.actual = actual;\r\n    this.expected = expected;\r\n    this.relation = relation;\r\n    // this.stack = (new Error()).stack\r\n    this.message = message;\r\n    this.name = 'DimensionError';\r\n    this.isDimensionError = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Flatten a multi dimensional array, put all elements in a one dimensional\r\n * array\r\n * @param {Array} array   A multi dimensional array\r\n * @ignore\r\n * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}\r\n * @return {Array}        The flattened array (1 dimensional)\r\n */\r\n/* istanbul ignore next */\r\nexport function flatten (array) {\r\n  /* istanbul ignore next */\r\n  if (!Array.isArray(array)) {\r\n    // if not an array, return as is\r\n    /* istanbul ignore next */\r\n    return array;\r\n  }\r\n  let flat = [];\r\n  \r\n  /* istanbul ignore next */\r\n  array.forEach(function callback (value) {\r\n    if (Array.isArray(value)) {\r\n      value.forEach(callback); // traverse through sub-arrays recursively\r\n    } else {\r\n      flat.push(value);\r\n    }\r\n  });\r\n\r\n  return flat;\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/model_interface.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 43,
    "kind": "class",
    "name": "TensorScriptModelInterface",
    "memberof": "lib/model_interface.mjs",
    "static": true,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/model_interface.mjs",
    "importStyle": "{TensorScriptModelInterface}",
    "description": "Base class for tensorscript models",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "tensorflow model"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tf",
        "description": "tensorflow / tensorflow-node / tensorflow-node-gpu"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "reshape",
        "description": "static reshape array function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getInputShape",
        "description": "static TensorScriptModelInterface"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 44,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "customTF",
        "description": "custom, overridale tensorflow / tensorflow-node / tensorflow-node-gpu"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "settings",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#settings",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "model",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#model",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "tf",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#tf",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "reshape",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#reshape",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "getInputShape",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#getInputShape",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "reshape",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface.reshape",
    "access": "public",
    "description": "Reshapes an array",
    "examples": [
      "const array = [ 0, 1, 1, 0, ];\nconst shape = [2,2];\nTensorScriptModelInterface.reshape(array,shape) // => \n[\n  [ 0, 1, ],\n  [ 1, 0, ],\n];"
    ],
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "input array"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "shape array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "returns a matrix with the defined shape"
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "getInputShape",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface.getInputShape",
    "access": "public",
    "description": "Returns the shape of an input matrix",
    "examples": [
      "const input = [\n  [ 0, 1, ],\n  [ 1, 0, ],\n];\nTensorScriptModelInterface.getInputShape(input) // => [2,2]"
    ],
    "see": [
      "{https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array}"
    ],
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "input matrix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "returns the shape of a matrix (e.g. [2,2])"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "train",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#train",
    "access": "public",
    "description": "Asynchronously trains tensorflow model, must be implemented by tensorscript class",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns trained tensorflow model"
    },
    "abstract": true
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "calculate",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#calculate",
    "access": "public",
    "description": "Predicts new dependent variables",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "new test independent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{data: Promise}"
      ],
      "spread": false,
      "description": "returns tensorflow prediction"
    },
    "abstract": true
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "loadModel",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#loadModel",
    "access": "public",
    "description": "Loads a saved tensoflow / keras model",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "tensorflow load model options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "tensorflow model"
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "predict",
    "memberof": "lib/model_interface.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model_interface.mjs~TensorScriptModelInterface#predict",
    "access": "public",
    "description": "Returns prediction values from tensorflow model",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "input_matrix",
        "description": "new test independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.json",
        "description": "return object instead of typed array"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.probability",
        "description": "return real values instead of integers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>|Array<Array<number>>"
      ],
      "spread": false,
      "description": "predicted model values"
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "size",
    "memberof": "lib/model_interface.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model_interface.mjs~size",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/model_interface.mjs",
    "importStyle": "{size}",
    "description": "Calculate the size of a multi dimensional array.\nThis function checks the size of the first entry, it does not validate\nwhether all dimensions match. (use function `validate` for that) (from math.js)",
    "see": [
      "{https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}"
    ],
    "lineNumber": 198,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": "size"
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "_reshape",
    "memberof": "lib/model_interface.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model_interface.mjs~_reshape",
    "access": "private",
    "export": true,
    "importPath": "tensorscript/lib/model_interface.mjs",
    "importStyle": "{_reshape}",
    "description": "Iteratively re-shape a multi dimensional array to fit the specified dimensions (from math.js)",
    "see": [
      "{https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}"
    ],
    "lineNumber": 218,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}               Array whose data has been formatted to fit the\n                               specified dimensions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "Array to be reshaped"
      },
      {
        "nullable": null,
        "types": [
          "Array.<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "sizes",
        "description": "List of sizes for each dimension"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array whose data has been formatted to fit the\n                               specified dimensions"
    }
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "DimensionError",
    "memberof": "lib/model_interface.mjs",
    "static": true,
    "longname": "lib/model_interface.mjs~DimensionError",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/model_interface.mjs",
    "importStyle": "{DimensionError}",
    "description": "Create a range error with the message:\n    'Dimension mismatch (<actual size> != <expected size>)' (from math.js)",
    "see": [
      "{https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}"
    ],
    "lineNumber": 250,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "number ",
          " number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "The actual size"
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The expected size"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "relation",
        "description": "Optional relation between actual\n                                         and expected size: '!=', '<', etc."
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 251,
    "undocument": true
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "actual",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#actual",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "expected",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#expected",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "relation",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#relation",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "message",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#message",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "name",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#name",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "isDimensionError",
    "memberof": "lib/model_interface.mjs~DimensionError",
    "static": false,
    "longname": "lib/model_interface.mjs~DimensionError#isDimensionError",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "flatten",
    "memberof": "lib/model_interface.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model_interface.mjs~flatten",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/model_interface.mjs",
    "importStyle": "{flatten}",
    "description": "Flatten a multi dimensional array, put all elements in a one dimensional\narray",
    "see": [
      "{https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}"
    ],
    "lineNumber": 275,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "A multi dimensional array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The flattened array (1 dimensional)"
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "lib/multiple_linear_regression.mjs",
    "content": "import { BaseNeuralNetwork, } from './deep_learning';\r\n\r\n/**\r\n * Mulitple Linear Regression with Tensorflow\r\n * @class MultipleLinearRegression\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class MultipleLinearRegression extends BaseNeuralNetwork {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  /* istanbul ignore next */\r\n  constructor(options = {}, properties = {}) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'sgd',\r\n      },\r\n      fit: {\r\n        epochs: 500,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow regression model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else {\r\n      denseLayers.push({ units: yShape[1], inputShape: [xShape[1],], });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/multiple_linear_regression.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "MultipleLinearRegression",
    "memberof": "lib/multiple_linear_regression.mjs",
    "static": true,
    "longname": "lib/multiple_linear_regression.mjs~MultipleLinearRegression",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/multiple_linear_regression.mjs",
    "importStyle": "{MultipleLinearRegression}",
    "description": "Mulitple Linear Regression with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MultipleLinearRegression"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deep_learning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/multiple_linear_regression.mjs~MultipleLinearRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/multiple_linear_regression.mjs~MultipleLinearRegression#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/multiple_linear_regression.mjs~MultipleLinearRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/multiple_linear_regression.mjs~MultipleLinearRegression#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow regression model",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "override": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/multiple_linear_regression.mjs~MultipleLinearRegression",
    "static": false,
    "longname": "lib/multiple_linear_regression.mjs~MultipleLinearRegression#layers",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "lib/regression.mjs",
    "content": "import { BaseNeuralNetwork, } from './deep_learning';\r\n\r\n/**\r\n * Deep Learning Regression with Tensorflow\r\n * @class DeepLearningRegression\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class DeepLearningRegression extends BaseNeuralNetwork {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object,layerPreference:String}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      layerPreference:'deep',\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow regression model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else if(this.settings.layerPreference==='deep') {\r\n      denseLayers.push({ units: xShape[ 1 ], inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: parseInt(Math.ceil(xShape[ 1 ] / 2), 10), kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });\r\n    } else {\r\n      denseLayers.push({ units: (xShape[ 1 ] * 2), inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/regression.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "DeepLearningRegression",
    "memberof": "lib/regression.mjs",
    "static": true,
    "longname": "lib/regression.mjs~DeepLearningRegression",
    "access": "public",
    "export": true,
    "importPath": "tensorscript/lib/regression.mjs",
    "importStyle": "{DeepLearningRegression}",
    "description": "Deep Learning Regression with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DeepLearningRegression"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deep_learning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object,layerPreference:String}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow regression model",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "override": true
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#layers",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true
  },
  {
    "kind": "index",
    "content": "# TensorScript\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/tensorscript/badge.svg?branch=master)](https://coveralls.io/github/repetere/tensorscript?branch=master) [![Build Status](https://travis-ci.org/repetere/tensorscript.svg?branch=master)](https://travis-ci.org/repetere/tensorscript)\n\nDeep Learning Classification, LSTM Time Series, Regression and Multi-Layered Perceptrons with Tensorflow\n### [Full Documentation](<https://github.com/repetere/tensorscript/blob/master/docs/API.md>)\n\n### Installation\n\n```sh\n$ npm i tensorscript\n```\n\n### Usage\n\n#### Classification\n\nTest against the [Iris Flower Data Set](https://archive.ics.uci.edu/ml/datasets/Iris)\n\n```javascript\nimport { DeepLearningClassification, } from 'tensorscript';\nimport ms from 'modelscript';\n\nasync function main(){\n  const irisFlowerDataCSV = await ms.csv.loadCSV('./test/mock/data/iris_data.csv');\n  const DataSet = new ms.DataSet(irisFlowerDataCSV);\n    /**\n     * encodedData = [ \n     *  { sepal_length_cm: 5.1,\n         sepal_width_cm: 3.5,\n        petal_length_cm: 1.4,\n        petal_width_cm: 0.2,\n        plant: 'Iris-setosa',\n        'plant_Iris-setosa': 1,\n        'plant_Iris-versicolor': 0,\n        'plant_Iris-virginica': 0 },\n        ...\n        { sepal_length_cm: 5.9,\n        sepal_width_cm: 3,\n        petal_length_cm: 4.2,\n        petal_width_cm: 1.5,\n        plant: 'Iris-versicolor',\n        'plant_Iris-setosa': 0,\n        'plant_Iris-versicolor': 1,\n        'plant_Iris-virginica': 0 },\n      ];\n    */\n  const encodedData = DataSet.fitColumns({\n    columns: [\n      {\n        name: 'plant',\n        options: {\n          strategy: 'onehot',\n        },\n      },\n    ],\n    returnData:true,\n  });\n  const independentVariables = [\n    'sepal_length_cm',\n    'sepal_width_cm',\n    'petal_length_cm',\n    'petal_width_cm',\n  ];\n  const dependentVariables = [\n    'plant_Iris-setosa',\n    'plant_Iris-versicolor',\n    'plant_Iris-virginica',\n  ];\n  const x_matrix = DataSet.columnMatrix(independentVariables); \n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /*\n    x_matrix = [\n      [ 5.1, 3.5, 1.4, 0.2 ],\n      [ 4.9, 3, 1.4, 0.2 ],\n      [ 4.7, 3.2, 1.3, 0.2 ],\n      ...\n    ]; \n    y_matrix = [\n      [ 1, 0, 0 ],\n      [ 1, 0, 0 ],\n      [ 1, 0, 0 ],\n      ...\n    ] \n    */\n  const input_x = [\n    [5.1, 3.5, 1.4, 0.2, ],\n    [6.3, 3.3, 6.0, 2.5, ],\n    [5.6, 3.0, 4.5, 1.5, ],\n    [5.0, 3.2, 1.2, 0.2, ],\n    [4.5, 2.3, 1.3, 0.3, ],\n  ];\n  const nnClassification = new DeepLearningClassification();\n  const nnClassificationModel = await nnClassification.train(x_matrix, y_matrix);\n  const predictions = await nnClassification.predict(input_x);\n  const answers = await nnClassification.predict(input_x, {\n    probability:false,\n  });\n  /*\n    predictions = [\n      [ 0.989512026309967, 0.010471616871654987, 0.00001649192017794121, ],\n      [ 0.0000016141033256644732, 0.054614484310150146, 0.9453839063644409, ],\n      [ 0.001930746017023921, 0.6456733345985413, 0.3523959517478943, ],\n      [ 0.9875779747962952, 0.01239941269159317, 0.00002274810685776174, ],\n      [ 0.9545140862464905, 0.04520365223288536, 0.0002823179238475859, ],\n    ];\n    answers = [\n      [ 1, 0, 0, ],\n      [ 0, 0, 1, ],\n      [ 0, 1, 0, ],\n      [ 1, 0, 0, ],\n      [ 1, 0, 0, ],\n    ];\n   */\n}\n\nmain();\n\n```\n\n#### Regression\n\nTest against the [Boston Housing Data Set](https://machinelearningmastery.com/regression-tutorial-keras-deep-learning-library-python/)\n\n```javascript\nimport { DeepLearningRegression, } from 'tensorscript';\nimport ms from 'modelscript';\n\nfunction scaleColumnMap(columnName) {\n  return {\n    name: columnName,\n    options: {\n      strategy: 'scale',\n      scaleOptions: {\n        strategy:'standard'\n      }\n    }\n  }\n}\n\nasync function main(){\n  const housingdataCSV = await ms.csv.loadCSV('./test/mock/data/boston_housing_data.csv');\n  /*\n  housingdataCSV = [\n    { CRIM: 0.00632, ZN: 18, INDUS: 2.31, CHAS: 0, NOX: 0.538, RM: 6.575, AGE: 65.2, DIS: 4.09, RAD: 1, TAX: 296, PTRATIO: 15.3, B: 396.9, LSTAT: 4.98, MEDV: 24 },\n    { CRIM: 0.02731, ZN: 0, INDUS: 7.07, CHAS: 0, NOX: 0.469, RM: 6.421, AGE: 78.9, DIS: 4.9671, RAD: 2, TAX: 242, PTRATIO: 17.8, B: 396.9, LSTAT: 9.14, MEDV: 21.6 },\n    ...\n  ]\n  */\n  const DataSet = new ms.DataSet(housingdataCSV);\n  const independentVariables = [\n    'CRIM',\n    'ZN',\n    'INDUS',\n    'CHAS',\n    'NOX',\n    'RM',\n    'AGE',\n    'DIS',\n    'RAD',\n    'TAX',\n    'PTRATIO',\n    'B',\n    'LSTAT',\n  ];\n  const dependentVariables = [\n    'MEDV',\n  ];\n  const columns = independentVariables.concat(dependentVariables);\n  DataSet.fitColumns({\n    columns: columns.map(scaleColumnMap),\n    returnData:false,\n  });\n  const x_matrix = DataSet.columnMatrix(independentVariables);\n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /* x_matrix = [\n    [ -0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932 ],\n    [ -0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634 ]\n    ...\n  ];\n  y_matrix = [\n    [ 0.15952778852449556 ],\n    [ -0.1014239172731213 ],\n    ...\n  ];\n  const y_vector = ms.util.pivotVector(y_matrix)[ 0 ];// not used but just illustrative\n  y_vector = [ 0.15952778852449556, -0.1014239172731213, ... ]\n    */\n  const input_x = [\n    [-0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932,],\n    [-0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634,],\n  ];\n  const nnRegression = new DeepLearningRegression();\n  const model = await nnRegression.train(x_matrix, y_matrix);\n  const predictions = await nnRegressionWide.predict(input_x); // [ [ 0.43396109342575073 ], [ 0.12437985092401505 ] ]\n  const predictions_unscaled = predictions.map(pred=>DataSet.scalers.get('MEDV').descale(pred[0])); //[ 26.523991670220486, 23.67674075943165 ]\n}\n\nmain();\n```\n\n#### Multiple Linear Regression\n\nTest against the [Portland housing price dataset](http://openclassroom.stanford.edu/MainFolder/DocumentPage.php?course=MachineLearning&doc=exercises/ex3/ex3.html)\n\n```javascript\nimport { MultipleLinearRegression, } from 'tensorscript';\nimport ms from 'modelscript';\n\nfunction scaleColumnMap(columnName) {\n  return {\n    name: columnName,\n    options: {\n      strategy: 'scale',\n      scaleOptions: {\n        strategy:'standard'\n      }\n    }\n  }\n}\n\nasync function main(){\n  const housingdataCSV = await ms.csv.loadCSV('./test/mock/data/portland_housing_data.csv');\n  /*\n  housingdataCSV = [\n    { sqft: 2104, bedrooms: 3, price: 399900 },\n    { sqft: 1600, bedrooms: 3, price: 329900 },\n    ...\n    { sqft: 1203, bedrooms: 3, price: 239500 }\n  ]\n  */\n  const DataSet = new ms.DataSet(housingdataCSV);\n  DataSet.fitColumns({\n    columns: [\n      'sqft',\n      'bedrooms',\n      'price',\n    ].map(scaleColumnMap),\n    returnData:true,\n  });\n  const independentVariables = [ 'sqft', 'bedrooms',];\n  const dependentVariables = [ 'price', ];\n  const x_matrix = DataSet.columnMatrix(independentVariables);\n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /* x_matrix = [\n      [2014, 3],\n      [1600, 3],\n    ];\n    y_matrix = [\n      [399900],\n      [329900],\n    ];\n    const y_vector = ms.util.pivotVector(y_matrix)[ 0 ];// not used but just illustrative\n    // y_vector = [ 399900, 329900]\n   */\n  const testSqft = DataSet.scalers.get('sqft').scale(1650);\n  const testBedrooms = DataSet.scalers.get('bedrooms').scale(3);\n  const input_x = [\n    testSqft,\n    testBedrooms,\n  ]; // input_x: [ -0.4412732005944351, -0.2236751871685913 ]\n  const tfMLR = new MultipleLinearRegression();\n  const model = await tfMLR.train(x_matrix, y_matrix);\n  const scaledPrediction = await tfMLR.predict(input_x); // [ -0.3785287367962629 ]\n  const prediction = DataSet.scalers.get('price').descale(scaledPrediction); // prediction: 293081.4643348962\n}\n\nmain();\n```\n\n#### Logistic Regression\n\nTest against the Social Media Ads\n\n```javascript\nimport { LogisticRegression, } from 'tensorscript';\nimport ms from 'modelscript';\n\nfunction scaleColumnMap(columnName) {\n  return {\n    name: columnName,\n    options: {\n      strategy: 'scale',\n      scaleOptions: {\n        strategy:'standard'\n      }\n    }\n  }\n}\n\nasync function main(){\n  const CSVData = await ms.csv.loadCSV('./test/mock/data/social_network_ads.csv');\n  const DataSet = new ms.DataSet(CSVData);\n  const scaledData = DataSet.fitColumns({\n    columns: independentVariables.map(scaleColumnMap),\n    returnData:true,\n  });\n  /*\n    scaledData = [\n      { 'User ID': 15624510,\n         Gender: 'Male',\n         Age: -1.7795687879022388,\n         EstimatedSalary: -1.4881825118632386,\n         Purchased: 0 },\n      { 'User ID': 15810944,\n         Gender: 'Male',\n         Age: -0.253270175924977,\n         EstimatedSalary: -1.458854384319991,\n         Purchased: 0 },\n      ...\n    ];\n    */\n  const independentVariables = [\n    'Age',\n    'EstimatedSalary',\n  ];\n  const dependentVariables = [\n    'Purchased',\n  ];\n  const x_matrix = DataSet.columnMatrix(independentVariables);\n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /*\n    x_matrix = [\n      [ -1.7795687879022388, -1.4881825118632386 ],\n      [ -0.253270175924977, -1.458854384319991 ],\n      ...\n    ];\n    y_matrix = [\n      [ 0 ],\n      [ 0 ],\n      ...\n    ];\n    */\n  const input_x = [\n    [-0.062482849427819266, 0.30083326827486173,], //0\n    [0.7960601198093905, -1.1069168538010206,], //1\n    [0.7960601198093905, 0.12486450301537644,], //0\n    [0.4144854668150751, -0.49102617539282206,], //0\n    [0.3190918035664962, 0.5061301610775946,], //1\n  ];\n  const tfLR = new LogisticRegression();\n  const model = await tfLR.train(x_matrix, y_matrix);\n  const prediction = await tfLR.predict(input_x); // => [ [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 1 ] ],\n}\n\nmain();\n```\n\n### Testing\n\n```sh\n$ npm i\n$ npm test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Misc\n\nAs of Node 8, ES modules are still used behind a flag, when running natively as an ES module\n\n```sh\n$ node --experimental-modules my-machine-learning-script.mjs\n# Also there are native bindings that require Python 2.x, make sure if you're using Andaconda, you build with your Python 2.x bin\n$ npm i --python=/usr/bin/python\n ```\n\nLicense\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "home",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# overview\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/installation.md",
    "name": "./manual/installation.md",
    "content": "# install\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# usage\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/tutorial.md",
    "name": "./manual/tutorial.md",
    "content": "# tutorial\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/configuration.md",
    "name": "./manual/configuration.md",
    "content": "# config\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/manual/example.md",
    "name": "./manual/example.md",
    "content": "# example\r\nthis is the overview",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "changes exs",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 78,
    "kind": "testFile",
    "name": "test/unit/base_neural_network_spec.mjs",
    "content": "import chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { BaseNeuralNetwork, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nconst independentVariables = [\r\n  'CRIM',\r\n  'ZN',\r\n  'INDUS',\r\n  'CHAS',\r\n  'NOX',\r\n  'RM',\r\n  'AGE',\r\n  'DIS',\r\n  'RAD',\r\n  'TAX',\r\n  'PTRATIO',\r\n  'B',\r\n  'LSTAT',\r\n];\r\nconst dependentVariables = [\r\n  'MEDV',\r\n];\r\nconst columns = independentVariables.concat(dependentVariables);\r\nlet housingDataCSV;\r\nlet DataSet;\r\n\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\ndescribe('BaseNeuralNetwork', function () {\r\n  this.timeout(10000);\r\n  before(async function () {\r\n    housingDataCSV = await ms.csv.loadCSV('./test/mock/data/boston_housing_data.csv');\r\n    DataSet = new ms.DataSet(housingDataCSV);\r\n    DataSet.fitColumns({\r\n      columns: columns.map(scaleColumnMap),\r\n      returnData:false,\r\n    });\r\n  });\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const MLR = new BaseNeuralNetwork();\r\n      const MLRConfigured = new BaseNeuralNetwork({ test: 'prop', });\r\n      expect(BaseNeuralNetwork).to.be.a('function');\r\n      expect(MLR).to.be.instanceOf(BaseNeuralNetwork);\r\n      expect(MLRConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  describe('generateLayers', () => {\r\n    it('should throw an error if generateLayers method is not implemented', () => {\r\n      class NN extends BaseNeuralNetwork{\r\n        generateLayers(x, y, layers) {\r\n          return true;\r\n        }\r\n      }\r\n      const TS = new BaseNeuralNetwork();\r\n      const TSNN = new NN();\r\n      expect(TS.generateLayers).to.be.a('function');\r\n      expect(TS.generateLayers.bind(null)).to.throw('generateLayers method is not implemented');\r\n      expect(TSNN.generateLayers).to.be.a('function');\r\n      expect(TSNN.generateLayers.bind(null)).to.be.ok;\r\n    });\r\n  });\r\n  describe('train', () => {\r\n    it('should train a NN', async function () {\r\n      const NN = new BaseNeuralNetwork();\r\n      const x = [];\r\n      const y = [];\r\n      const layers = [];\r\n      const tf = {\r\n        tensor: () => ({ \r\n          dispose: () => { },\r\n        }),\r\n        sequential: () => ({\r\n          compile: () => true,\r\n          fit: () => true,\r\n        }),\r\n      };\r\n      const settings = {};\r\n      function getInputShape() { }\r\n      function generateLayers() { }\r\n      const trainedModel = await NN.train.call({\r\n        getInputShape,\r\n        generateLayers,\r\n        tf,\r\n        settings,\r\n      }, x, y, layers);\r\n      const trainedModel2 = await NN.train.call({\r\n        getInputShape,\r\n        generateLayers,\r\n        tf,\r\n        settings,\r\n        layers:[],\r\n      }, x, y);\r\n      expect(trainedModel).to.be.an('object');\r\n      expect(trainedModel2).to.be.an('object');\r\n    });\r\n  });\r\n  describe('calculate', () => {\r\n    it('should throw an error if input is invalid', () => {\r\n      const NN = new BaseNeuralNetwork();\r\n      expect(NN.calculate).to.be.a('function');\r\n      expect(NN.calculate.bind()).to.throw(/invalid input matrix/);\r\n      expect(NN.calculate.bind(null, 'invalid')).to.throw(/invalid input matrix/);\r\n    });\r\n    it('should train a NN', async function () {\r\n      const NN = new BaseNeuralNetwork();\r\n      const x = [1, 2, 3, ];\r\n      const x2 = [[1, 2, 3, ], [1, 2, 3, ], ];\r\n      const tf = {\r\n        tensor: () => ({ \r\n          dispose: () => { },\r\n        }),\r\n        sequential: () => ({\r\n          compile: () => true,\r\n          fit: () => true,\r\n        }),\r\n      };\r\n      const model = {\r\n        predict: () => true,\r\n      };\r\n      const prediction = NN.calculate.call({\r\n        tf,\r\n        model,\r\n      }, x);\r\n      const prediction2 = NN.calculate.call({\r\n        tf,\r\n        model,\r\n      }, x2);\r\n      expect(prediction).to.be.true;\r\n      expect(prediction2).to.be.true;\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/base_neural_network_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/base_neural_network_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0",
    "access": null,
    "description": "BaseNeuralNetwork",
    "lineNumber": 44
  },
  {
    "__docId__": 80,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe1",
    "access": null,
    "description": "constructor",
    "lineNumber": 54
  },
  {
    "__docId__": 81,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe1.it2",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 55
  },
  {
    "__docId__": 82,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe3",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 63
  },
  {
    "__docId__": 83,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe3.it4",
    "access": null,
    "description": "should throw an error if generateLayers method is not implemented",
    "lineNumber": 64
  },
  {
    "__docId__": 84,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe5",
    "access": null,
    "description": "train",
    "lineNumber": 78
  },
  {
    "__docId__": 85,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe5.it6",
    "access": null,
    "description": "should train a NN",
    "lineNumber": 79
  },
  {
    "__docId__": 86,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe7",
    "access": null,
    "description": "calculate",
    "lineNumber": 113
  },
  {
    "__docId__": 87,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe7.it8",
    "access": null,
    "description": "should throw an error if input is invalid",
    "lineNumber": 114
  },
  {
    "__docId__": 88,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/unit/base_neural_network_spec.mjs~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base_neural_network_spec.mjs~describe0.describe7.it9",
    "access": null,
    "description": "should train a NN",
    "lineNumber": 120
  },
  {
    "__docId__": 89,
    "kind": "testFile",
    "name": "test/unit/classification_spec.mjs",
    "content": "import chai from 'chai';\r\n// import sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { DeepLearningClassification, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nconst independentVariables = [\r\n  'sepal_length_cm',\r\n  'sepal_width_cm',\r\n  'petal_length_cm',\r\n  'petal_width_cm',\r\n];\r\nconst dependentVariables = [\r\n  'plant_Iris-setosa',\r\n  'plant_Iris-versicolor',\r\n  'plant_Iris-virginica',\r\n];\r\nconst columns = independentVariables.concat(dependentVariables);\r\nlet housingDataCSV;\r\nlet DataSet;\r\nlet x_matrix;\r\nlet y_matrix;\r\nlet nnClassification;\r\nlet nnClassificationModel;\r\nconst fit = {\r\n  epochs: 100,\r\n  batchSize: 5,\r\n};\r\nconst encodedAnswers = {\r\n  'Iris-setosa': [1, 0, 0, ],\r\n  'Iris-versicolor': [0, 1, 0, ],\r\n  'Iris-virginica': [0, 0, 1, ],\r\n};\r\nconst input_x = [\r\n  [5.1, 3.5, 1.4, 0.2, ],\r\n  [6.3,3.3,6.0,2.5, ],\r\n  [5.6, 3.0, 4.5, 1.5, ],\r\n  [5.0, 3.2, 1.2, 0.2, ],\r\n  [4.5, 2.3, 1.3, 0.3, ],\r\n];\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\ndescribe('DeepLearningClassification', function () {\r\n  this.timeout(120000);\r\n  before(async function () {\r\n    /**\r\n     * encodedData = [ \r\n     *  { sepal_length_cm: 5.1,\r\n         sepal_width_cm: 3.5,\r\n        petal_length_cm: 1.4,\r\n        petal_width_cm: 0.2,\r\n        plant: 'Iris-setosa',\r\n        'plant_Iris-setosa': 1,\r\n        'plant_Iris-versicolor': 0,\r\n        'plant_Iris-virginica': 0 },\r\n        ...\r\n        { sepal_length_cm: 5.9,\r\n        sepal_width_cm: 3,\r\n        petal_length_cm: 4.2,\r\n        petal_width_cm: 1.5,\r\n        plant: 'Iris-versicolor',\r\n        'plant_Iris-setosa': 0,\r\n        'plant_Iris-versicolor': 1,\r\n        'plant_Iris-virginica': 0 },\r\n      ];\r\n    */\r\n    housingDataCSV = await ms.csv.loadCSV('./test/mock/data/iris_data.csv');\r\n    DataSet = new ms.DataSet(housingDataCSV);\r\n    // DataSet.fitColumns({\r\n    //   columns: columns.map(scaleColumnMap),\r\n    //   returnData:false,\r\n    // });\r\n    const encodedData = DataSet.fitColumns({\r\n      columns: [\r\n        {\r\n          name: 'plant',\r\n          options: {\r\n            strategy: 'onehot',\r\n          },\r\n        },\r\n      ],\r\n      returnData:true,\r\n    });\r\n    x_matrix = DataSet.columnMatrix(independentVariables); \r\n    y_matrix = DataSet.columnMatrix(dependentVariables);\r\n    /*\r\n    x_matrix = [\r\n      [ 5.1, 3.5, 1.4, 0.2 ],\r\n      [ 4.9, 3, 1.4, 0.2 ],\r\n      [ 4.7, 3.2, 1.3, 0.2 ],\r\n      ...\r\n    ]; \r\n    y_matrix = [\r\n      [ 1, 0, 0 ],\r\n      [ 1, 0, 0 ],\r\n      [ 1, 0, 0 ],\r\n      ...\r\n    ] \r\n    */\r\n    // console.log({ x_matrix, y_matrix, });\r\n\r\n    nnClassification = new DeepLearningClassification({ fit, });\r\n    nnClassificationModel = await nnClassification.train(x_matrix, y_matrix);\r\n  });\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const NN = new DeepLearningClassification();\r\n      const NNConfigured = new DeepLearningClassification({ test: 'prop', });\r\n      expect(DeepLearningClassification).to.be.a('function');\r\n      expect(NN).to.be.instanceOf(DeepLearningClassification);\r\n      expect(NNConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  describe('generateLayers', () => {\r\n    it('should generate a classification network', async () => {\r\n      const predictions = await nnClassification.predict(input_x);\r\n      const answers = await nnClassification.predict(input_x, {\r\n        probability:false,\r\n      });\r\n      const shape = nnClassification.getInputShape(predictions);\r\n      // console.log('nnClassification.layers', nnClassification.layers);\r\n      // console.log({\r\n      //   predictions_unscaled,\r\n      //   predictions,\r\n      //   shape,\r\n      // });\r\n      \r\n      // const probabilities = ms.DataSet.reverseColumnMatrix({\r\n      //   vectors: predictions,\r\n      //   labels: dependentVariables,\r\n      // });\r\n      // const results = ms.DataSet.reverseColumnMatrix({\r\n      //   vectors: answers,\r\n      //   labels: dependentVariables,\r\n      // });\r\n      // console.log({\r\n      //   predictions,\r\n      //   // probabilities,\r\n      //   answers,\r\n      //   // results,\r\n      //   shape,\r\n      // });\r\n      expect(predictions).to.have.lengthOf(input_x.length);\r\n      expect(nnClassification.layers).to.have.lengthOf(2);\r\n      expect(shape).to.eql([5, 3,]);\r\n      expect(answers[ 0 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n      // expect(answers[ 1 ]).to.eql(encodedAnswers[ 'Iris-virginica' ]);\r\n      // expect(answers[ 2 ]).to.eql(encodedAnswers[ 'Iris-versicolor' ]);\r\n      // expect(answers[ 3 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n      // expect(answers[ 4 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n      return true;\r\n    });\r\n    it('should generate a network from layers', async () => { \r\n      const nnClassificationCustom = new DeepLearningClassification({ layerPreference:'custom', fit, });\r\n      await nnClassificationCustom.train(x_matrix, y_matrix, nnClassification.layers);\r\n      expect(nnClassificationCustom.layers).to.have.lengthOf(2);\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/classification_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/unit/classification_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10",
    "access": null,
    "description": "DeepLearningClassification",
    "lineNumber": 56
  },
  {
    "__docId__": 91,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/unit/classification_spec.mjs~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10.describe11",
    "access": null,
    "description": "constructor",
    "lineNumber": 118
  },
  {
    "__docId__": 92,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/unit/classification_spec.mjs~describe10.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10.describe11.it12",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 119
  },
  {
    "__docId__": 93,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/unit/classification_spec.mjs~describe10",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10.describe13",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 127
  },
  {
    "__docId__": 94,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/unit/classification_spec.mjs~describe10.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10.describe13.it14",
    "access": null,
    "description": "should generate a classification network",
    "lineNumber": 128
  },
  {
    "__docId__": 95,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/unit/classification_spec.mjs~describe10.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/classification_spec.mjs~describe10.describe13.it15",
    "access": null,
    "description": "should generate a network from layers",
    "lineNumber": 166
  },
  {
    "__docId__": 96,
    "kind": "testFile",
    "name": "test/unit/logistic_regression_spec.mjs",
    "content": "import chai from 'chai';\r\n// import sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { LogisticRegression, } from '../../index.mjs';\r\n\r\nconst expect = chai.expect;\r\nconst independentVariables = [\r\n  'Age',\r\n  'EstimatedSalary',\r\n];\r\nconst dependentVariables = [\r\n  'Purchased',\r\n];\r\nlet CSVData;\r\nlet DataSet;\r\nlet x_matrix;\r\nlet y_matrix;\r\nlet nnLR;\r\nlet nnLRClass;\r\nlet nnLRReg;\r\nlet nnLRModel;\r\nlet nnLRClassModel;\r\nlet nnLRRegModel;\r\nconst encodedAnswers = {\r\n  'yes': [1,],\r\n  'no': [0,],\r\n};\r\nconst fit = {\r\n  epochs: 10,\r\n  batchSize: 5,\r\n};\r\nconst input_x = [\r\n  [-0.062482849427819266, 0.30083326827486173, ], //0\r\n  [0.7960601198093905, -1.1069168538010206, ], //1\r\n  [0.7960601198093905, 0.12486450301537644, ], //0\r\n  [0.4144854668150751, -0.49102617539282206, ], //0\r\n  [0.3190918035664962, 0.5061301610775946, ], //1\r\n];\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\ndescribe('LogisticRegression', function () {\r\n  this.timeout(120000);\r\n  before(async function () {\r\n    CSVData = await ms.csv.loadCSV('./test/mock/data/social_network_ads.csv');\r\n    DataSet = new ms.DataSet(CSVData);\r\n    const scaledData = DataSet.fitColumns({\r\n      columns: independentVariables.map(scaleColumnMap),\r\n      returnData:true,\r\n    });\r\n    /*\r\n    scaledData = [ \r\n      { 'User ID': 15624510,\r\n         Gender: 'Male',\r\n         Age: -1.7795687879022388,\r\n         EstimatedSalary: -1.4881825118632386,\r\n         Purchased: 0 },\r\n      { 'User ID': 15810944,\r\n         Gender: 'Male',\r\n         Age: -0.253270175924977,\r\n         EstimatedSalary: -1.458854384319991,\r\n         Purchased: 0 },\r\n      ...\r\n    ];\r\n    */\r\n    x_matrix = DataSet.columnMatrix(independentVariables); \r\n    y_matrix = DataSet.columnMatrix(dependentVariables);\r\n    /*\r\n    x_matrix = [\r\n      [ -1.7795687879022388, -1.4881825118632386 ],\r\n      [ -0.253270175924977, -1.458854384319991 ],\r\n      ...\r\n    ]; \r\n    y_matrix = [\r\n      [ 0 ],\r\n      [ 0 ],\r\n      ...\r\n    ] \r\n    */\r\n    // console.log({ x_matrix, y_matrix, });\r\n\r\n    nnLR = new LogisticRegression({ fit,  });\r\n    nnLRClass = new LogisticRegression({ type: 'class', fit, });\r\n    nnLRReg = new LogisticRegression({ type: 'l1l2', fit, });\r\n    const models = await Promise.all([\r\n      nnLR.train(x_matrix, y_matrix),\r\n      nnLRClass.train(x_matrix, y_matrix),\r\n      nnLRReg.train(x_matrix, y_matrix),\r\n    ]);\r\n    nnLRModel = models[ 0 ];\r\n    nnLRClassModel = models[ 1 ];\r\n    nnLRRegModel = models[ 2 ];\r\n  });\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const NN = new LogisticRegression();\r\n      const NNConfigured = new LogisticRegression({ test: 'prop', });\r\n      expect(LogisticRegression).to.be.a('function');\r\n      expect(NN).to.be.instanceOf(LogisticRegression);\r\n      expect(NNConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  describe('generateLayers', () => {\r\n    it('should generate a classification network', async () => {\r\n      const predictions = await nnLR.predict(input_x);\r\n      const answers = await nnLR.predict(input_x, {\r\n        probability:false,\r\n      });\r\n      const shape = nnLR.getInputShape(predictions);\r\n     \r\n      expect(predictions).to.have.lengthOf(input_x.length);\r\n      expect(nnLR.layers).to.have.lengthOf(1);\r\n      expect(shape).to.eql([5, 1, ]);\r\n      // expect(answers[ 0 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n      return true;\r\n    });\r\n    it('should generate a network from layers', async () => { \r\n      const nnLRCustom = new LogisticRegression({ type:'custom', fit, });\r\n      await nnLRCustom.train(x_matrix, y_matrix, nnLR.layers);\r\n      expect(nnLRCustom.layers).to.have.lengthOf(1);\r\n    });\r\n    // it('should validate trainning data', async () => { \r\n    //   const nnLRCustom = new LogisticRegression({ type:'custom', fit, });\r\n    //   await nnLRCustom.train(x_matrix, y_matrix, nnLR.layers, x_matrix, y_matrix);\r\n    //   expect(nnLRCustom.layers).to.have.lengthOf(1);\r\n    // });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/logistic_regression_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/unit/logistic_regression_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16",
    "access": null,
    "description": "LogisticRegression",
    "lineNumber": 55
  },
  {
    "__docId__": 98,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/unit/logistic_regression_spec.mjs~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16.describe17",
    "access": null,
    "description": "constructor",
    "lineNumber": 107
  },
  {
    "__docId__": 99,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/logistic_regression_spec.mjs~describe16.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16.describe17.it18",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 108
  },
  {
    "__docId__": 100,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/unit/logistic_regression_spec.mjs~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16.describe19",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 116
  },
  {
    "__docId__": 101,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/logistic_regression_spec.mjs~describe16.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16.describe19.it20",
    "access": null,
    "description": "should generate a classification network",
    "lineNumber": 117
  },
  {
    "__docId__": 102,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/unit/logistic_regression_spec.mjs~describe16.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/logistic_regression_spec.mjs~describe16.describe19.it21",
    "access": null,
    "description": "should generate a network from layers",
    "lineNumber": 130
  },
  {
    "__docId__": 103,
    "kind": "testFile",
    "name": "test/unit/lstm_time_series_spec.mjs",
    "content": "import chai from 'chai';\r\n// import sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { LSTMTimeSeries, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nconst independentVariables = [\r\n  'Passengers',\r\n];\r\nconst dependentVariables = [\r\n  'Passengers',\r\n];\r\nconst columns = independentVariables;//.concat(dependentVariables);\r\nlet csvData;\r\nlet DataSet;\r\nlet x_matrix;\r\nlet y_matrix;\r\nlet train_size;\r\nlet test_size;\r\nlet train_x_data;\r\nlet test_x_data;\r\nlet trainDataSet;\r\nlet testDataSet;\r\nlet x_matrix_test;\r\nlet TSTS;\r\nlet TSTSStateful;\r\nlet TSTSONE;\r\nlet TSTSStatefulONE;\r\nlet accuracyTest = {};\r\nlet evals;\r\nconst ds = [\r\n  [ 1, ], [ 2, ], [ 3, ], [ 4, ], [ 5, ], [ 6, ], [ 7, ], [ 8, ], [ 9, ], [ 10, ],\r\n];\r\n\r\nconst fit= {\r\n  epochs: 10,\r\n  batchSize: 1,\r\n};\r\n\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\nasync function getModelAccuracy(preddata){\r\n  const m = await preddata.model.train(x_matrix);\r\n  const testData = preddata.model.getTimeseriesDataSet(x_matrix_test);\r\n  // const preInputShape = LSTMTimeSeries.getInputShape(preddata.input);\r\n  // console.log({ testData })\r\n  // console.log({preInputShape})\r\n  // console.log('preddata.input',preddata.input)\r\n  // console.log('testData.x_matrix',testData.x_matrix)\r\n  // const predictions = await preddata.model.predict(preddata.input);\r\n  const predictions = await preddata.model.predict(testData.x_matrix);\r\n  const predictions_unscaled = predictions.map(pred => [DataSet.scalers.get('Passengers').descale(pred[ 0 ]),]);\r\n  const actuals_unscaled = testData.y_matrix.map(act => [DataSet.scalers.get('Passengers').descale(act[ 0 ]),]);\r\n  // let results = ms.DataSet.reverseColumnMatrix({\r\n  //   vectors: predictions_unscaled,\r\n  //   labels: dependentVariables,\r\n  // });\r\n  return({\r\n    model: preddata.modelname,\r\n    // predictions,\r\n    // actuals_unscaled,\r\n    // predictions_unscaled,\r\n    // results,\r\n    accuracy: (ms.util.rSquared(\r\n      ms.util.pivotVector(actuals_unscaled)[ 0 ], //actuals,\r\n      ms.util.pivotVector(predictions_unscaled)[ 0 ], //estimates,\r\n    ) * 100), //.toFixed(2)+'%',\r\n  });\r\n}\r\n\r\ndescribe('LSTMTimeSeries', function () {\r\n  this.timeout(120000);\r\n  before(async function () {\r\n    /*\r\n    csvData = [ \r\n      { Month: '1949-01', Passengers: 112 },\r\n      { Month: '1949-02', Passengers: 118 },\r\n      { Month: '1949-03', Passengers: 132 },\r\n      { Month: '1949-04', Passengers: 129 },\r\n      ...\r\n      ];\r\n    scaledData = [ \r\n      { Month: '1949-01', Passengers: -1.4028822039369186 },\r\n      { Month: '1949-02', Passengers: -1.3528681653893018 },\r\n      ...\r\n    ]\r\n    */\r\n    csvData = await ms.csv.loadCSV('./test/mock/data/international-airline-passengers-no_footer.csv');\r\n    DataSet = new ms.DataSet(csvData);\r\n    const scaledData = DataSet.fitColumns({\r\n      columns: columns.map(scaleColumnMap),\r\n      returnData:false,\r\n    });\r\n    //{ train_size: 96, test_size: 48 }\r\n    train_size = parseInt(DataSet.data.length * 0.67);\r\n    test_size = DataSet.data.length - train_size;\r\n    train_x_data = DataSet.data.slice(0, train_size);\r\n    test_x_data = DataSet.data.slice(train_size, DataSet.data.length);\r\n    trainDataSet = new ms.DataSet(train_x_data);\r\n    testDataSet = new ms.DataSet(test_x_data);\r\n    x_matrix = trainDataSet.columnMatrix(independentVariables); \r\n    x_matrix_test = testDataSet.columnMatrix(independentVariables); \r\n    \r\n    /*\r\n    x_matrix = [ \r\n      [ -1.4028822039369186 ],\r\n      [ -1.3528681653893018 ],\r\n      [ -1.2361687421115288 ],\r\n      ...\r\n    ]; \r\n    x_matrix_test: = [ \r\n      [ 0.2892594335907897 ],\r\n      [ 0.17256001031301674 ],\r\n      [ 0.6310220303328392 ],\r\n      ...\r\n    ]; \r\n    */\r\n    TSTS = new LSTMTimeSeries({\r\n      lookBack: 3,\r\n      fit,\r\n    });\r\n    TSTSStateful = new LSTMTimeSeries({\r\n      lookBack: 3,\r\n      stateful: true,\r\n      fit,\r\n    });\r\n    TSTSONE = new LSTMTimeSeries({\r\n      lookBack: 1,\r\n      fit,\r\n    });\r\n    TSTSStatefulONE = new LSTMTimeSeries({\r\n      lookBack: 1,\r\n      stateful: true,\r\n      fit,\r\n    });\r\n    evals = [\r\n      {\r\n        model: TSTS,\r\n        modelname: 'TSTS',\r\n      },\r\n      {\r\n        model: TSTSStateful,\r\n        modelname: 'TSTSStateful',\r\n      },\r\n      {\r\n        model: TSTSONE,\r\n        modelname: 'TSTSONE',\r\n      },\r\n      {\r\n        model: TSTSStatefulONE,\r\n        modelname: 'TSTSStatefulONE',\r\n      },\r\n    ];\r\n  });\r\n  describe('static createDataset', () => {\r\n    const lookback = 3;\r\n    it('should return timeseries datasets', () => {\r\n      const [datax, datay, ] = LSTMTimeSeries.createDataset(ds);\r\n      const [ datax2, datay2, ] = LSTMTimeSeries.createDataset(ds, lookback);\r\n      expect(datax).to.have.lengthOf(datay.length);\r\n      expect(datax2).to.have.lengthOf(datay2.length);\r\n      expect(datax[ 0 ]).to.have.lengthOf(1);\r\n      expect(datax2[ 0 ]).to.have.lengthOf(lookback);\r\n    });\r\n  });\r\n  describe('static getTimeseriesShape', () => {\r\n    const [datax, datay,] = LSTMTimeSeries.createDataset(ds, 3);\r\n    it('should calculate timeseries shape', () => {\r\n      const tsShape = LSTMTimeSeries.getTimeseriesShape.call({\r\n        getInputShape: LSTMTimeSeries.getInputShape,\r\n        settings: {\r\n          timeSteps: 1,\r\n          mulitpleTimeSteps:false,\r\n        },\r\n      }, datax);\r\n      const tsShape2 = LSTMTimeSeries.getTimeseriesShape.call({\r\n        getInputShape: LSTMTimeSeries.getInputShape,\r\n        settings: {\r\n          timeSteps: 1,\r\n          mulitpleTimeSteps:true,\r\n        },\r\n      }, datax);\r\n      const tsShape3 = LSTMTimeSeries.getTimeseriesShape.call({\r\n        getInputShape: LSTMTimeSeries.getInputShape,\r\n        settings: {\r\n          timeSteps: 1,\r\n          stateful:true,\r\n        },\r\n      }, datax);\r\n      expect(tsShape).to.eql([6, 1, 3,]);\r\n      expect(tsShape2).to.eql([6, 3, 1,]);\r\n      expect(tsShape3).to.eql([6, 3, 1,]);\r\n    });\r\n  });\r\n  describe('static getTimeseriesDataSet', () => {\r\n    const [datax, datay,] = LSTMTimeSeries.createDataset(ds, 3);\r\n    it('should return timeseries data', () => {\r\n      const tsShape = LSTMTimeSeries.getTimeseriesDataSet.call({\r\n        getInputShape: LSTMTimeSeries.getInputShape,\r\n        settings: {\r\n          timeSteps: 1,\r\n          mulitpleTimeSteps:true,\r\n        },\r\n      }, ds, 3);\r\n      expect(tsShape.yShape).to.eql([6, 1,]);\r\n      expect(tsShape.xShape).to.eql([6, 3,]);\r\n      expect(tsShape.y_matrix).to.eql(datay);\r\n      // expect(tsShape.x_matrix).to.eql(datax);\r\n      // console.log({ tsShape, });\r\n    });\r\n  });\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const NN = new LSTMTimeSeries();\r\n      const NNConfigured = new LSTMTimeSeries({ test: 'prop', });\r\n      expect(LSTMTimeSeries).to.be.a('function');\r\n      expect(NN).to.be.instanceOf(LSTMTimeSeries);\r\n      expect(NNConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  describe('async predict', () => {\r\n    it('should allow for stateless predictions with one step time windows', async () => {\r\n      const accr = await getModelAccuracy({ model: TSTSONE, modelname: 'TSTSONE', });\r\n      // console.log({ accr });\r\n      expect(accr.accuracy).to.be.ok;\r\n      return true;\r\n    });\r\n    it('should allow for stateless predictions with multiple step time windows', async () => {\r\n      const accr = await getModelAccuracy({ model: TSTS, modelname: 'TSTSONE', });\r\n      // console.log({ accr, });\r\n      expect(accr.accuracy).to.be.ok;\r\n      return true;\r\n    });\r\n    it('should make stateful predictions', async () => {\r\n      const accr = await getModelAccuracy({ model: TSTSStateful, modelname: 'TSTSStateful', });\r\n      const accr2 = await getModelAccuracy({ model: TSTSStatefulONE, modelname: 'TSTSStatefulONE', });\r\n      // console.log({ accr, accr2 });\r\n      expect(accr.accuracy).to.be.ok;\r\n      expect(accr2.accuracy).to.be.ok;\r\n      return true;\r\n    });\r\n    it('should make single predictions', async () => {\r\n      const testData = TSTSONE.getTimeseriesDataSet(x_matrix_test);\r\n      const predictions = await TSTSONE.predict(testData.x_matrix[ 0 ]);\r\n      expect(predictions).to.have.lengthOf(1);\r\n      // console.log({ predictions });\r\n      return true;\r\n    });\r\n  });\r\n  describe('async train', () => {\r\n    it('should train a model with supplied test data', async () => {\r\n      const testData = TSTSONE.getTimeseriesDataSet(x_matrix_test);\r\n      const LSTMTS = new LSTMTimeSeries({ layerPreference: 'custom', fit, });\r\n      const matrices = LSTMTimeSeries.createDataset(x_matrix_test);\r\n      const x = matrices[ 0 ];\r\n      const y = matrices[ 1 ];\r\n      await LSTMTS.train(x, y);\r\n      const predictions = await TSTSONE.predict(testData.x_matrix[ 0 ]);\r\n      const predictions_unscaled = predictions.map(pred => [DataSet.scalers.get('Passengers').descale(pred[ 0 ]),]);\r\n      console.log({ predictions_unscaled });\r\n      expect(predictions).to.have.lengthOf(1);\r\n      expect(LSTMTS.layers).to.be.a('object');\r\n      return true;\r\n    });\r\n  });\r\n  describe('generateLayers', () => {\r\n    // it('should generate a classification network', async () => {\r\n    //   const predictions = await nnClassification.predict(input_x);\r\n    //   const answers = await nnClassification.predict(input_x, {\r\n    //     probability:false,\r\n    //   });\r\n    //   const shape = nnClassification.getInputShape(predictions);\r\n    //   // console.log('nnClassification.layers', nnClassification.layers);\r\n    //   // console.log({\r\n    //   //   predictions,\r\n    //   //   // probabilities,\r\n    //   //   answers,\r\n    //   //   // results,\r\n    //   //   shape,\r\n    //   // });\r\n    //   expect(predictions).to.have.lengthOf(input_x.length);\r\n    //   expect(nnClassification.layers).to.have.lengthOf(2);\r\n    //   expect(shape).to.eql([5, 3,]);\r\n    //   expect(answers[ 0 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n    //   // expect(answers[ 1 ]).to.eql(encodedAnswers[ 'Iris-virginica' ]);\r\n    //   // expect(answers[ 2 ]).to.eql(encodedAnswers[ 'Iris-versicolor' ]);\r\n    //   // expect(answers[ 3 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n    //   // expect(answers[ 4 ]).to.eql(encodedAnswers[ 'Iris-setosa' ]);\r\n    //   return true;\r\n    // });\r\n    it('should generate a network from layers', async () => { \r\n      const LSTMTS = new LSTMTimeSeries({ layerPreference: 'custom', fit, });\r\n      console.log('TSTSONE.layers', TSTSONE.layers);\r\n      await LSTMTS.train(x_matrix, y_matrix, TSTSONE.layers);\r\n      expect(LSTMTS.layers).to.be.a('object');\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/lstm_time_series_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/unit/lstm_time_series_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22",
    "access": null,
    "description": "LSTMTimeSeries",
    "lineNumber": 84
  },
  {
    "__docId__": 105,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe23",
    "access": null,
    "description": "static createDataset",
    "lineNumber": 168
  },
  {
    "__docId__": 106,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe23.it24",
    "access": null,
    "description": "should return timeseries datasets",
    "lineNumber": 170
  },
  {
    "__docId__": 107,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe25",
    "access": null,
    "description": "static getTimeseriesShape",
    "lineNumber": 179
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe25.it26",
    "access": null,
    "description": "should calculate timeseries shape",
    "lineNumber": 181
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe27",
    "access": null,
    "description": "static getTimeseriesDataSet",
    "lineNumber": 208
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe27.it28",
    "access": null,
    "description": "should return timeseries data",
    "lineNumber": 210
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe29",
    "access": null,
    "description": "constructor",
    "lineNumber": 225
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe29.it30",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 226
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe31",
    "access": null,
    "description": "async predict",
    "lineNumber": 234
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe31.it32",
    "access": null,
    "description": "should allow for stateless predictions with one step time windows",
    "lineNumber": 235
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe31.it33",
    "access": null,
    "description": "should allow for stateless predictions with multiple step time windows",
    "lineNumber": 241
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe31.it34",
    "access": null,
    "description": "should make stateful predictions",
    "lineNumber": 247
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe31.it35",
    "access": null,
    "description": "should make single predictions",
    "lineNumber": 255
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe36",
    "access": null,
    "description": "async train",
    "lineNumber": 263
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe36.it37",
    "access": null,
    "description": "should train a model with supplied test data",
    "lineNumber": 264
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe38",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 279
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/unit/lstm_time_series_spec.mjs~describe22.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/lstm_time_series_spec.mjs~describe22.describe38.it39",
    "access": null,
    "description": "should generate a network from layers",
    "lineNumber": 304
  },
  {
    "__docId__": 122,
    "kind": "testFile",
    "name": "test/unit/math_js_spec.mjs",
    "content": "import chai from 'chai';\r\nimport { TensorScriptModelInterface, size, flatten, } from '../../lib/model_interface.mjs';\r\nimport assert from 'assert';\r\nconst expect = chai.expect;\r\nconst array = {\r\n  reshape: TensorScriptModelInterface.reshape,\r\n  flatten,\r\n};\r\nconst reshape = array.reshape;\r\ndescribe('util.array', function () {\r\n  /** @test {../../lib/model_interface.mjs~size} */\r\n  describe('size', function () {\r\n    it('should calculate the size of a scalar', function () {\r\n      assert.deepEqual(size(2), []);\r\n      assert.deepEqual(size('string'), []);\r\n    });\r\n\r\n    it('should calculate the size of a 1-dimensional array', function () {\r\n      assert.deepEqual(size([]), [0, ]);\r\n      assert.deepEqual(size([1, ]), [1, ]);\r\n      assert.deepEqual(size([1, 2, 3, ]), [3, ]);\r\n    });\r\n\r\n    it('should calculate the size of a 2-dimensional array', function () {\r\n      assert.deepEqual(size([[], ]), [1, 0, ]);\r\n      assert.deepEqual(size([[], [], ]), [2, 0, ]);\r\n      assert.deepEqual(size([[1, 2, ], [3, 4, ], ]), [2, 2, ]);\r\n      assert.deepEqual(size([[1, 2, 3, ], [4, 5, 6, ], ]), [2, 3, ]);\r\n    });\r\n\r\n    it('should calculate the size of a 3-dimensional array', function () {\r\n      assert.deepEqual(size([[[], ], ]), [1, 1, 0, ]);\r\n      assert.deepEqual(size([[[], [], ], ]), [1, 2, 0, ]);\r\n      assert.deepEqual(size([[[], [], ], [[], [], ], ]), [2, 2, 0, ]);\r\n      assert.deepEqual(size([[[1, ], [2, ], ], [[3, ], [4, ], ], ]), [2, 2, 1, ]);\r\n      assert.deepEqual(size([[[1, 2, ], [3, 4, ], ], [[5, 6, ], [7, 8, ], ], ]), [2, 2, 2, ]);\r\n      assert.deepEqual(size([\r\n        [[1, 2, 3, 4, ], [5, 6, 7, 8, ], ],\r\n        [[1, 2, 3, 4, ], [5, 6, 7, 8, ], ],\r\n        [[1, 2, 3, 4, ], [5, 6, 7, 8, ], ],\r\n      ]), [3, 2, 4, ]);\r\n    });\r\n\r\n    it('should not validate whether all dimensions match', function () {\r\n      assert.deepEqual(size([[1, 2, ], [3, 4, 5, ], ]), [2, 2, ]);\r\n    });\r\n  });\r\n  /** @test {../../lib/model_interface.mjs~reshape} */\r\n  describe('reshape', function () {\r\n    it('should reshape a 1 dimensional array into a 2 dimensional array', function () {\r\n      const a = [1, 2, 3, 4, 5, 6, 7, 8, ];\r\n\r\n      assert.deepEqual(\r\n        reshape(a, [2, 4, ]),\r\n        [[1, 2, 3, 4, ],\r\n          [5, 6, 7, 8, ], ]\r\n      );\r\n      assert.deepEqual(\r\n        reshape(a, [4, 2, ]),\r\n        [[1, 2, ],\r\n          [3, 4, ],\r\n          [5, 6, ],\r\n          [7, 8, ], ]\r\n      );\r\n      assert.deepEqual(\r\n        reshape(a, [1, 8, ]),\r\n        [[1, 2, 3, 4, 5, 6, 7, 8, ], ]\r\n      );\r\n      assert.deepEqual(\r\n        reshape(a, [1, 1, 8, ]),\r\n        [[[1, 2, 3, 4, 5, 6, 7, 8, ], ], ]\r\n      );\r\n    });\r\n\r\n    it('should reshape a 2 dimensional array into a 1 dimensional array', function () {\r\n      const a = [\r\n        [0, 1, ],\r\n        [2, 3, ],\r\n      ];\r\n\r\n      assert.deepEqual(\r\n        reshape(a, [4, ]),\r\n        [0, 1, 2, 3, ]\r\n      );\r\n    });\r\n\r\n    it('should reshape a 3 dimensional array', function () {\r\n      const a = [[[1, 2, ],\r\n        [3, 4, ], ],\r\n\r\n      [[5, 6, ],\r\n        [7, 8, ], ], ];\r\n\r\n      assert.deepEqual(\r\n        reshape(a, [8, ]),\r\n        [1, 2, 3, 4, 5, 6, 7, 8, ]\r\n      );\r\n\r\n      assert.deepEqual(\r\n        reshape(a, [2, 4, ]),\r\n        [[1, 2, 3, 4, ],\r\n          [5, 6, 7, 8, ], ]\r\n      );\r\n    });\r\n\r\n    it('should throw an error when reshaping to a dimension with length 0', function () {\r\n      assert.throws(function () {\r\n        reshape([1, 2, ], [0, 2, ]); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape([1, 2, ], [2, 0, ]); \r\n      }, /DimensionError/);\r\n    });\r\n\r\n    it('should throw an error when reshaping a non-empty array to an empty array', function () {\r\n      assert.throws(function () {\r\n        reshape([1, ], []); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape([1, 2, ], []); \r\n      }, /DimensionError/);\r\n    });\r\n\r\n    it('should throw an error when reshaping to a size that differs from the original', function () {\r\n      const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, ];\r\n\r\n      assert.deepEqual(\r\n        reshape(a, [3, 3, ]),\r\n        [[1, 2, 3, ],\r\n          [4, 5, 6, ],\r\n          [7, 8, 9, ], ]\r\n      );\r\n      assert.throws(function () {\r\n        reshape(a, [3, 2, ]); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape(a, [2, 3, ]); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape(a, [3, 3, 3, ]); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape(a, [3, 4, ]); \r\n      }, /DimensionError/);\r\n      assert.throws(function () {\r\n        reshape(a, [4, 3, ]); \r\n      }, /DimensionError/);\r\n    });\r\n\r\n    it('should throw an error in case of wrong type of arguments', function () {\r\n      assert.throws(function () {\r\n        reshape([], 2); \r\n      }, /Array expected/);\r\n      assert.throws(function () {\r\n        reshape(2); \r\n      }, /Array expected/);\r\n    });\r\n  });\r\n  /** @test {../../lib/model_interface.mjs~flatten} */\r\n  describe('flatten', function () {\r\n    it('should flatten a scalar', function () {\r\n      assert.deepEqual(array.flatten(1), 1);\r\n    });\r\n\r\n    it('should flatten a 1 dimensional array', function () {\r\n      assert.deepEqual(array.flatten([1, 2, 3, ]), [1, 2, 3, ]);\r\n    });\r\n\r\n    it('should flatten a 2 dimensional array', function () {\r\n      assert.deepEqual(array.flatten([[1, 2, ], [3, 4, ], ]), [1, 2, 3, 4, ]);\r\n    });\r\n\r\n    it('should flatten a 3 dimensional array', function () {\r\n      assert.deepEqual(array.flatten([[[1, 2, ], [3, 4, ], ], [[5, 6, ], [7, 8, ], ], ]), [1, 2, 3, 4, 5, 6, 7, 8, ]);\r\n    });\r\n\r\n    it('should return a new array', function () {\r\n      const input = [3, 2, 1, ];\r\n      const flat = array.flatten(input);\r\n      flat.sort();\r\n      assert.deepEqual(input, [3, 2, 1, ]);\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/math_js_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/unit/math_js_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40",
    "access": null,
    "description": "util.array",
    "lineNumber": 10
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/unit/math_js_spec.mjs~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41",
    "access": null,
    "description": "size",
    "lineNumber": 12,
    "testTargets": [
      "../../lib/model_interface.mjs~size"
    ]
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41.it42",
    "access": null,
    "description": "should calculate the size of a scalar",
    "lineNumber": 13
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41.it43",
    "access": null,
    "description": "should calculate the size of a 1-dimensional array",
    "lineNumber": 18
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41.it44",
    "access": null,
    "description": "should calculate the size of a 2-dimensional array",
    "lineNumber": 24
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41.it45",
    "access": null,
    "description": "should calculate the size of a 3-dimensional array",
    "lineNumber": 31
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe41.it46",
    "access": null,
    "description": "should not validate whether all dimensions match",
    "lineNumber": 44
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/unit/math_js_spec.mjs~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47",
    "access": null,
    "description": "reshape",
    "lineNumber": 49,
    "testTargets": [
      "../../lib/model_interface.mjs~reshape"
    ]
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it48",
    "access": null,
    "description": "should reshape a 1 dimensional array into a 2 dimensional array",
    "lineNumber": 50
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it49",
    "access": null,
    "description": "should reshape a 2 dimensional array into a 1 dimensional array",
    "lineNumber": 75
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it50",
    "access": null,
    "description": "should reshape a 3 dimensional array",
    "lineNumber": 87
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it51",
    "access": null,
    "description": "should throw an error when reshaping to a dimension with length 0",
    "lineNumber": 106
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it52",
    "access": null,
    "description": "should throw an error when reshaping a non-empty array to an empty array",
    "lineNumber": 115
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it53",
    "access": null,
    "description": "should throw an error when reshaping to a size that differs from the original",
    "lineNumber": 124
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe47.it54",
    "access": null,
    "description": "should throw an error in case of wrong type of arguments",
    "lineNumber": 150
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/unit/math_js_spec.mjs~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55",
    "access": null,
    "description": "flatten",
    "lineNumber": 160,
    "testTargets": [
      "../../lib/model_interface.mjs~flatten"
    ]
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55.it56",
    "access": null,
    "description": "should flatten a scalar",
    "lineNumber": 161
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55.it57",
    "access": null,
    "description": "should flatten a 1 dimensional array",
    "lineNumber": 165
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55.it58",
    "access": null,
    "description": "should flatten a 2 dimensional array",
    "lineNumber": 169
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55.it59",
    "access": null,
    "description": "should flatten a 3 dimensional array",
    "lineNumber": 173
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/math_js_spec.mjs~describe40.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/math_js_spec.mjs~describe40.describe55.it60",
    "access": null,
    "description": "should return a new array",
    "lineNumber": 177
  },
  {
    "__docId__": 144,
    "kind": "testFile",
    "name": "test/unit/model_interface_spec.mjs",
    "content": "import chai from 'chai';\r\n// import sinon from 'sinon';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { TensorScriptModelInterface, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\n\r\n/** @test {TensorScriptModelInterface} */\r\ndescribe('TensorScriptModelInterface', () => {\r\n  /** @test {TensorScriptModelInterface#constructor} */\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const TSM = new TensorScriptModelInterface();\r\n      const TSMConfigured = new TensorScriptModelInterface({ test: 'prop', });\r\n      expect(TensorScriptModelInterface).to.be.a('function');\r\n      expect(TSM).to.be.instanceOf(TensorScriptModelInterface);\r\n      expect(TSMConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#reshape} */\r\n  describe('reshape', () => {\r\n    it('should export a static method', () => {\r\n      expect(TensorScriptModelInterface.reshape).to.be.a('function');\r\n    });\r\n    it('should reshape an array into a matrix', () => {\r\n      const array = [1, 0, 0, 1, ];\r\n      const shape = [2, 2, ];\r\n      const matrix = [\r\n        [1, 0,],\r\n        [0, 1,],\r\n      ];\r\n      const result = TensorScriptModelInterface.reshape(array, shape);\r\n      expect(result).to.eql(matrix);\r\n      // expect(TensorScriptModelInterface.reshape.bind(null, array, [1, 2, ])).to.throw(/specified shape/);\r\n    });\r\n    it('should reshape multiple dimensions', () => {\r\n      const array = [ 1, 1, 0, 1, 1, 0, ];\r\n      const shape = [ 2, 3, 1, ];\r\n      const matrix = [\r\n        [ [1], [1], [0], ],\r\n        [ [1], [1], [0], ],\r\n      ];\r\n      const result = TensorScriptModelInterface.reshape(array, shape);\r\n      // console.log({ result });\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#getInputShape} */\r\n  describe('getInputShape', () => {\r\n    it('should export a static method', () => {\r\n      expect(TensorScriptModelInterface.getInputShape).to.be.a('function');\r\n    });\r\n    it('should return the shape of a matrix', () => {\r\n      const matrix = [\r\n        [1, 0,],\r\n        [0, 1,],\r\n      ];\r\n      const matrix2 = [\r\n        [1, 0,],\r\n        [1, 0,],\r\n        [1, 0,],\r\n        [1, 0,],\r\n        [1, 0,],\r\n        [1, 0,],\r\n        [0, 1,],\r\n      ];\r\n      const matrix3 = [\r\n        [1, 0, 4, 5,],\r\n        [1, 0, 4, 5,],\r\n        [1, 0, 4, 5,],\r\n        [1, 0, 4, 5,],\r\n        [1, 0, 4, 5,],\r\n      ];\r\n      const matrix4 = [\r\n        [1, 0, 4, 5,],\r\n        [1, 0, 4,],\r\n        [1, 0, 4, 5,],\r\n      ];\r\n      const matrix5 = [\r\n        [[1, ], [1, ], [0, ], ],\r\n        [[1, ], [1, ], [0, ], ],\r\n        [[1, ], [1, ], [0, ], ],\r\n        [[1, ], [1, ], [0, ], ],\r\n        [[1, ], [1, ], [0, ], ],\r\n        [[1, ], [1, ], [0, ], ],\r\n      ];\r\n      TensorScriptModelInterface.getInputShape(matrix5);\r\n      expect(TensorScriptModelInterface.getInputShape(matrix)).to.eql([2, 2,]);\r\n      expect(TensorScriptModelInterface.getInputShape(matrix2)).to.eql([7, 2,]);\r\n      expect(TensorScriptModelInterface.getInputShape(matrix3)).to.eql([5, 4,]);\r\n      expect(TensorScriptModelInterface.getInputShape.bind(null, matrix4)).to.throw(/input must have the same length in each row/);\r\n      expect(TensorScriptModelInterface.getInputShape(matrix5)).to.eql([6, 3,1]);\r\n    });\r\n    it('should throw an error if input is not a matrix', () => {\r\n      expect(TensorScriptModelInterface.getInputShape.bind()).to.throw(/must be a matrix/);\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#train} */\r\n  describe('train', () => {\r\n    it('should throw an error if train method is not implemented', () => {\r\n      class MLR extends TensorScriptModelInterface{\r\n        train(x, y) {\r\n          return true;\r\n        }\r\n      }\r\n      const TSM = new TensorScriptModelInterface();\r\n      const TSMMLR = new MLR();\r\n      expect(TSM.train).to.be.a('function');\r\n      expect(TSM.train.bind(null)).to.throw('train method is not implemented');\r\n      expect(TSMMLR.train).to.be.a('function');\r\n      expect(TSMMLR.train.bind(null)).to.be.ok;\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#calculate} */\r\n  describe('calculate', () => {\r\n    it('should throw an error if calculate method is not implemented', () => {\r\n      class MLR extends TensorScriptModelInterface{\r\n        calculate(x, y) {\r\n          return true;\r\n        }\r\n      }\r\n      const TSM = new TensorScriptModelInterface();\r\n      const TSMMLR = new MLR();\r\n      expect(TSM.calculate).to.be.a('function');\r\n      expect(TSM.calculate.bind(null)).to.throw('calculate method is not implemented');\r\n      expect(TSMMLR.calculate).to.be.a('function');\r\n      expect(TSMMLR.calculate.bind(null)).to.be.ok;\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#predict} */\r\n  describe('predict', () => {\r\n    class MLR extends TensorScriptModelInterface{\r\n      calculate(x) {\r\n        this.yShape = [100, 2,];\r\n        return {\r\n          data: () => new Promise((resolve) => {\r\n            const predictions = new Float32Array([21.41, 31.74, 41.01, 51.53,]);\r\n            resolve(predictions);\r\n          }),\r\n        };\r\n      }\r\n    }\r\n    it('should throw an error if input is invalid', async function () {\r\n      const TSMMLR = new MLR();\r\n      try {\r\n        const predictPromise = await TSMMLR.predict();\r\n        expect(predictPromise).to.not.exist;\r\n      } catch (e) {\r\n        expect(e).to.be.an('error');\r\n        expect(e).to.match(/invalid input matrix/);\r\n      }\r\n      try {\r\n        const predictPromiseCatch = await TSMMLR.predict([1,]);\r\n        expect(predictPromiseCatch).to.not.exist;\r\n      } catch (e2) {\r\n        expect(e2).to.be.an('error');\r\n        expect(e2).to.match(/Dimension mismatch/);\r\n      }\r\n    });\r\n    it('should return preductions', async function () {\r\n      const TSMMLR = new MLR();\r\n      const input = [\r\n        [1, 2, ],\r\n        [1, 2, ],\r\n      ];\r\n      const predictions = await TSMMLR.predict(input);\r\n      const predictionsRounded = await TSMMLR.predict(input, { probability:false, });\r\n      const predictionsRaw = await TSMMLR.predict(input, { json: false, });\r\n      expect(predictions).to.have.lengthOf(2);\r\n      expect(predictionsRaw).to.be.a('Float32Array');\r\n      predictionsRounded.forEach(predRow => {\r\n        predRow.forEach(pred => {\r\n          expect(Number.isInteger(pred)).to.be.true;\r\n        });\r\n      });\r\n    });\r\n  });\r\n  /** @test {TensorScriptModelInterface#loadModel} */\r\n  describe('loadModel', () => {\r\n    it('should call tensorflow load model and store it', async function () {\r\n      const TSM = new TensorScriptModelInterface({}, {\r\n        tf: {\r\n          loadModel: () => new Promise((resolve, reject) => resolve(true)),\r\n        },\r\n      });\r\n      const loadedModel = await TSM.loadModel();\r\n      expect(loadedModel).to.be.true;\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/model_interface_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/unit/model_interface_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61",
    "access": null,
    "description": "TensorScriptModelInterface",
    "lineNumber": 12,
    "testTargets": [
      "TensorScriptModelInterface"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe62",
    "access": null,
    "description": "constructor",
    "lineNumber": 14,
    "testTargets": [
      "TensorScriptModelInterface#constructor"
    ]
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe62.it63",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 15
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe64",
    "access": null,
    "description": "reshape",
    "lineNumber": 24,
    "testTargets": [
      "TensorScriptModelInterface#reshape"
    ]
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe64.it65",
    "access": null,
    "description": "should export a static method",
    "lineNumber": 25
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe64.it66",
    "access": null,
    "description": "should reshape an array into a matrix",
    "lineNumber": 28
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe64.it67",
    "access": null,
    "description": "should reshape multiple dimensions",
    "lineNumber": 39
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe68",
    "access": null,
    "description": "getInputShape",
    "lineNumber": 51,
    "testTargets": [
      "TensorScriptModelInterface#getInputShape"
    ]
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe68.it69",
    "access": null,
    "description": "should export a static method",
    "lineNumber": 52
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe68.it70",
    "access": null,
    "description": "should return the shape of a matrix",
    "lineNumber": 55
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe68.it71",
    "access": null,
    "description": "should throw an error if input is not a matrix",
    "lineNumber": 96
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe72",
    "access": null,
    "description": "train",
    "lineNumber": 101,
    "testTargets": [
      "TensorScriptModelInterface#train"
    ]
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe72",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe72.it73",
    "access": null,
    "description": "should throw an error if train method is not implemented",
    "lineNumber": 102
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe74",
    "access": null,
    "description": "calculate",
    "lineNumber": 117,
    "testTargets": [
      "TensorScriptModelInterface#calculate"
    ]
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe74.it75",
    "access": null,
    "description": "should throw an error if calculate method is not implemented",
    "lineNumber": 118
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe76",
    "access": null,
    "description": "predict",
    "lineNumber": 133,
    "testTargets": [
      "TensorScriptModelInterface#predict"
    ]
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe76.it77",
    "access": null,
    "description": "should throw an error if input is invalid",
    "lineNumber": 145
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe76.it78",
    "access": null,
    "description": "should return preductions",
    "lineNumber": 162
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/unit/model_interface_spec.mjs~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe79",
    "access": null,
    "description": "loadModel",
    "lineNumber": 181,
    "testTargets": [
      "TensorScriptModelInterface#loadModel"
    ]
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/unit/model_interface_spec.mjs~describe61.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/model_interface_spec.mjs~describe61.describe79.it80",
    "access": null,
    "description": "should call tensorflow load model and store it",
    "lineNumber": 182
  },
  {
    "__docId__": 165,
    "kind": "testFile",
    "name": "test/unit/multiple_linear_regression_spec.mjs",
    "content": "import chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { MultipleLinearRegression, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nconst independentVariables = ['sqft', 'bedrooms', ];\r\nconst dependentVariables = ['price',];\r\nlet housingDataCSV;\r\nlet input_x;\r\nlet DataSet;\r\nlet x_matrix;\r\nlet y_matrix;\r\nlet trainedMLR;\r\nlet trainedMLRModel;\r\n\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\n/** @test {MultipleLinearRegression} */\r\ndescribe('MultipleLinearRegression', function () {\r\n  this.timeout(20000);\r\n  before(async function () {\r\n    housingDataCSV = await ms.csv.loadCSV('./test/mock/data/portland_housing_data.csv');\r\n    /*\r\n    housingdataCSV = [ \r\n      { sqft: 2104, bedrooms: 3, price: 399900 },\r\n      { sqft: 1600, bedrooms: 3, price: 329900 },\r\n      ...\r\n      { sqft: 1203, bedrooms: 3, price: 239500 } \r\n    ] \r\n    */\r\n    DataSet = new ms.DataSet(housingDataCSV);\r\n    DataSet.fitColumns({\r\n      columns: independentVariables.concat(dependentVariables).map(scaleColumnMap),\r\n      returnData:false,\r\n    });\r\n    x_matrix = DataSet.columnMatrix(independentVariables); \r\n    y_matrix = DataSet.columnMatrix(dependentVariables);\r\n    // const y_vector = ms.util.pivotVector(y_matrix)[ 0 ];// not used but just illustrative\r\n    /* x_matrix = [\r\n        [2014, 3],\r\n        [1600, 3],\r\n      ] \r\n      y_matrix = [\r\n        [399900],\r\n        [329900],\r\n      ] \r\n      y_vector = [ 399900, 329900]\r\n    */\r\n    trainedMLR = new MultipleLinearRegression({\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    });\r\n    trainedMLRModel = await trainedMLR.train(x_matrix, y_matrix);\r\n    input_x = [\r\n      [\r\n        DataSet.scalers.get('sqft').scale(4215),\r\n        DataSet.scalers.get('bedrooms').scale(4),\r\n      ], //549000\r\n      [\r\n        DataSet.scalers.get('sqft').scale(852),\r\n        DataSet.scalers.get('bedrooms').scale(2),\r\n      ], //179900\r\n    ];\r\n    return true;\r\n  });\r\n  /** @test {MultipleLinearRegression#constructor} */\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const MLR = new MultipleLinearRegression({\r\n        fit: {\r\n          epochs: 200,\r\n          batchSize: 5,\r\n        },\r\n      });\r\n      const MLRConfigured = new MultipleLinearRegression({ test: 'prop', }, {});\r\n      expect(MultipleLinearRegression).to.be.a('function');\r\n      expect(MLR).to.be.instanceOf(MultipleLinearRegression);\r\n      expect(MLRConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  /** @test {MultipleLinearRegression#generateLayers} */\r\n  describe('generateLayers', () => {\r\n    it('should generate a classification network', async () => {\r\n      const predictions = await trainedMLR.predict(input_x);\r\n      const shape = trainedMLR.getInputShape(predictions);\r\n      // console.log('nnLR.layers', nnLR.layers);\r\n      // console.log({\r\n      //   predictions,\r\n      //   shape,\r\n      // });\r\n      expect(predictions).to.have.lengthOf(input_x.length);\r\n      expect(trainedMLR.layers).to.have.lengthOf(1);\r\n      const descaledPredictions = predictions.map(DataSet.scalers.get('price').descale);\r\n      expect(descaledPredictions[ 0 ]).to.be.closeTo(630000, 20000);\r\n      expect(descaledPredictions[ 1 ]).to.be.closeTo(190000, 10000);\r\n      return true;\r\n    });\r\n    it('should generate a network from layers', async () => { \r\n      const nnLRCustom = new MultipleLinearRegression({\r\n        type: 'custom',\r\n        fit: {\r\n          epochs: 10,\r\n          batchSize: 5,\r\n        },\r\n      });\r\n      await nnLRCustom.train(x_matrix, y_matrix, trainedMLR.layers);\r\n      expect(nnLRCustom.layers).to.have.lengthOf(1);\r\n      return true;\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/multiple_linear_regression_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81",
    "access": null,
    "description": "MultipleLinearRegression",
    "lineNumber": 33,
    "testTargets": [
      "MultipleLinearRegression"
    ]
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe82",
    "access": null,
    "description": "constructor",
    "lineNumber": 83,
    "testTargets": [
      "MultipleLinearRegression#constructor"
    ]
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe82.it83",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 84
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe84",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 98,
    "testTargets": [
      "MultipleLinearRegression#generateLayers"
    ]
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe84.it85",
    "access": null,
    "description": "should generate a classification network",
    "lineNumber": 99
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/multiple_linear_regression_spec.mjs~describe81.describe84.it86",
    "access": null,
    "description": "should generate a network from layers",
    "lineNumber": 114
  },
  {
    "__docId__": 172,
    "kind": "testFile",
    "name": "test/unit/regression_spec.mjs",
    "content": "import chai from 'chai';\r\n// import sinon from 'sinon';\r\nimport ms from 'modelscript';\r\nimport sinonChai from 'sinon-chai';\r\nimport chaiAsPromised from 'chai-as-promised';\r\nimport 'babel-polyfill';\r\nimport { DeepLearningRegression, } from '../../index.mjs';\r\nconst expect = chai.expect;\r\nconst independentVariables = [\r\n  'CRIM',\r\n  'ZN',\r\n  'INDUS',\r\n  'CHAS',\r\n  'NOX',\r\n  'RM',\r\n  'AGE',\r\n  'DIS',\r\n  'RAD',\r\n  'TAX',\r\n  'PTRATIO',\r\n  'B',\r\n  'LSTAT',\r\n];\r\nconst dependentVariables = [\r\n  'MEDV',\r\n];\r\nconst columns = independentVariables.concat(dependentVariables);\r\nlet housingDataCSV;\r\nlet DataSet;\r\nlet x_matrix;\r\nlet y_matrix;\r\nlet nnRegressionDeep;\r\nlet nnRegressionWide;\r\nlet nnRegressionDeepModel;\r\nlet nnRegressionWideModel;\r\nconst fit = {\r\n  epochs: 10,\r\n  batchSize: 5,\r\n};\r\nconst input_x = [\r\n  [-0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932,],\r\n  [-0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634,],\r\n];\r\n\r\nchai.use(sinonChai);\r\nchai.use(chaiAsPromised);\r\nfunction scaleColumnMap(columnName) {\r\n  return {\r\n    name: columnName,\r\n    options: {\r\n      strategy: 'scale',\r\n      scaleOptions: {\r\n        strategy:'standard',\r\n      },\r\n    },\r\n  };\r\n}\r\ndescribe('DeepLearningRegression', function () {\r\n  this.timeout(120000);\r\n  before(async function () {\r\n    /*\r\n      housingdataCSV = [ \r\n        { CRIM: 0.00632, ZN: 18, INDUS: 2.31, CHAS: 0, NOX: 0.538, RM: 6.575, AGE: 65.2, DIS: 4.09, RAD: 1, TAX: 296, PTRATIO: 15.3, B: 396.9, LSTAT: 4.98, MEDV: 24 },\r\n        { CRIM: 0.02731, ZN: 0, INDUS: 7.07, CHAS: 0, NOX: 0.469, RM: 6.421, AGE: 78.9, DIS: 4.9671, RAD: 2, TAX: 242, PTRATIO: 17.8, B: 396.9, LSTAT: 9.14, MEDV: 21.6 },\r\n        ...\r\n      ] \r\n      */\r\n    housingDataCSV = await ms.csv.loadCSV('./test/mock/data/boston_housing_data.csv');\r\n    DataSet = new ms.DataSet(housingDataCSV);\r\n    DataSet.fitColumns({\r\n      columns: columns.map(scaleColumnMap),\r\n      returnData:false,\r\n    });\r\n    x_matrix = DataSet.columnMatrix(independentVariables); \r\n    y_matrix = DataSet.columnMatrix(dependentVariables);\r\n    /* x_matrix = [\r\n      [ -0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932 ],\r\n      [ -0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634 ]\r\n      ...\r\n    ]; \r\n    y_matrix = [\r\n      [ 0.15952778852449556 ],\r\n      [ -0.1014239172731213 ],\r\n      ...\r\n    ] \r\n    const y_vector = ms.util.pivotVector(y_matrix)[ 0 ];// not used but just illustrative\r\n    y_vector = [ 0.15952778852449556,\r\n       -0.1014239172731213, ... ]\r\n     */\r\n\r\n    nnRegressionDeep = new DeepLearningRegression({ layerPreference:'deep', fit, });\r\n    nnRegressionWide = new DeepLearningRegression({ layerPreference: 'wide', fit, });\r\n    const models = await Promise.all([\r\n      nnRegressionDeep.train(x_matrix, y_matrix),\r\n      nnRegressionWide.train(x_matrix, y_matrix),\r\n    ]);\r\n    nnRegressionDeepModel = models[ 0 ];\r\n    nnRegressionWideModel = models[ 1 ];\r\n    return true;\r\n  });\r\n  describe('constructor', () => {\r\n    it('should export a named module class', () => {\r\n      const NN = new DeepLearningRegression();\r\n      const NNConfigured = new DeepLearningRegression({ test: 'prop', });\r\n      expect(DeepLearningRegression).to.be.a('function');\r\n      expect(NN).to.be.instanceOf(DeepLearningRegression);\r\n      expect(NNConfigured.settings.test).to.eql('prop');\r\n    });\r\n  });\r\n  describe('generateLayers', () => {\r\n    it('should generate a deep network', async () => {\r\n      const predictions = await nnRegressionDeep.predict(input_x);\r\n      const predictions_unscaled = predictions.map(pred=>DataSet.scalers.get('MEDV').descale(pred[0]));\r\n      const shape = nnRegressionDeep.getInputShape(predictions);\r\n      // console.log('nnRegressionDeep.layers', nnRegressionDeep.layers);\r\n      // console.log({\r\n      //   predictions_unscaled,\r\n      //   predictions,\r\n      //   shape,\r\n      // });\r\n      expect(predictions).to.have.lengthOf(input_x.length);\r\n      expect(nnRegressionDeep.layers).to.have.lengthOf(3);\r\n      expect(shape).to.eql([2, 1,]);\r\n      expect(predictions_unscaled[ 0 ]).to.be.closeTo(24, 15);\r\n      expect(predictions_unscaled[ 0 ]).to.be.closeTo(21, 15);\r\n    });\r\n    it('should generate a wide network', async () => {\r\n      const predictions = await nnRegressionWide.predict(input_x);\r\n      const predictions_unscaled = predictions.map(pred=>DataSet.scalers.get('MEDV').descale(pred[0]));\r\n      const shape = nnRegressionWide.getInputShape(predictions);\r\n      // console.log('nnRegressionWide.layers', nnRegressionWide.layers);\r\n      expect(predictions).to.have.lengthOf(input_x.length);\r\n      expect(nnRegressionWide.layers).to.have.lengthOf(2);\r\n      expect(shape).to.eql([2, 1,]);\r\n      expect(predictions_unscaled[ 0 ]).to.be.closeTo(24, 15);\r\n      expect(predictions_unscaled[ 0 ]).to.be.closeTo(21, 15);\r\n    });\r\n    it('should generate a network from layers', async () => { \r\n      const nnRegressionCustom = new DeepLearningRegression({ layerPreference:'custom', fit, });\r\n      await nnRegressionCustom.train(x_matrix, y_matrix, nnRegressionWide.layers);\r\n      expect(nnRegressionCustom.layers).to.have.lengthOf(2);\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/test/unit/regression_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/unit/regression_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87",
    "access": null,
    "description": "DeepLearningRegression",
    "lineNumber": 58
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/unit/regression_spec.mjs~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe88",
    "access": null,
    "description": "constructor",
    "lineNumber": 101
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/unit/regression_spec.mjs~describe87.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe88.it89",
    "access": null,
    "description": "should export a named module class",
    "lineNumber": 102
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/unit/regression_spec.mjs~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe90",
    "access": null,
    "description": "generateLayers",
    "lineNumber": 110
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/regression_spec.mjs~describe87.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe90.it91",
    "access": null,
    "description": "should generate a deep network",
    "lineNumber": 111
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/regression_spec.mjs~describe87.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe90.it92",
    "access": null,
    "description": "should generate a wide network",
    "lineNumber": 127
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/unit/regression_spec.mjs~describe87.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/regression_spec.mjs~describe87.describe90.it93",
    "access": null,
    "description": "should generate a network from layers",
    "lineNumber": 138
  }
]