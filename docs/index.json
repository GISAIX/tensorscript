[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/classification.mjs",
    "content": "import { BaseNeuralNetwork, } from './deeplearning';\r\n\r\n/**\r\n * Deep Learning Classification with Tensorflow\r\n * @class DeepLearningClassification\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class DeepLearningClassification extends BaseNeuralNetwork{\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      compile: {\r\n        loss: 'categoricalCrossentropy',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow classification model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    this.yShape = yShape;\r\n    this.xShape = xShape;\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else {\r\n      denseLayers.push({ units: (xShape[ 1 ] * 2), inputDim: xShape[1],  activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], activation: 'softmax', });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/classification.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "DeepLearningClassification",
    "memberof": "lib/classification.mjs",
    "static": true,
    "longname": "lib/classification.mjs~DeepLearningClassification",
    "access": "public",
    "export": true,
    "importPath": "@tensorscript/ts-deeplearning/lib/classification.mjs",
    "importStyle": "{DeepLearningClassification}",
    "description": "Deep Learning Classification with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DeepLearningClassification"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deeplearning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow classification model",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "override": true
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/classification.mjs~DeepLearningClassification",
    "static": false,
    "longname": "lib/classification.mjs~DeepLearningClassification#layers",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "lib/deeplearning.mjs",
    "content": "import { TensorScriptModelInterface, } from '@tensorscript/core';\r\n\r\n/**\r\n * Deep Learning with Tensorflow\r\n * @class BaseNeuralNetwork\r\n * @implements {TensorScriptModelInterface}\r\n */\r\nexport class BaseNeuralNetwork extends TensorScriptModelInterface {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow model\r\n   * @abstract \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    throw new ReferenceError('generateLayers method is not implemented');\r\n  }\r\n  /**\r\n   * Asynchronously trains tensorflow model\r\n   * @override\r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - array of model dense layer parameters\r\n   * @return {Object} returns trained tensorflow model \r\n   */\r\n  async train(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    const xs = this.tf.tensor(x_matrix, xShape);\r\n    const ys = this.tf.tensor(y_matrix, yShape);\r\n    this.xShape = xShape;\r\n    this.yShape = yShape;\r\n    this.model = this.tf.sequential();\r\n    this.generateLayers.call(this, x_matrix, y_matrix, layers || this.layers);\r\n    this.model.compile(this.settings.compile);\r\n    await this.model.fit(xs, ys, this.settings.fit);\r\n    xs.dispose();\r\n    ys.dispose();\r\n    return this.model;\r\n  }\r\n  /**\r\n   * Predicts new dependent variables\r\n   * @override\r\n   * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables\r\n   * @return {{data: Promise}} returns tensorflow prediction \r\n   */\r\n  calculate(input_matrix) {\r\n    if (!input_matrix || Array.isArray(input_matrix)===false) throw new Error('invalid input matrix');\r\n    const predictionInput = (Array.isArray(input_matrix[ 0 ]))\r\n      ? input_matrix\r\n      : [\r\n        input_matrix,\r\n      ];\r\n    const predictionTensor = this.tf.tensor(predictionInput);\r\n    const prediction = this.model.predict(predictionTensor);\r\n    predictionTensor.dispose();\r\n    return prediction;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/deeplearning.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "class",
    "name": "BaseNeuralNetwork",
    "memberof": "lib/deeplearning.mjs",
    "static": true,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "access": "public",
    "export": true,
    "importPath": "@tensorscript/ts-deeplearning/lib/deeplearning.mjs",
    "importStyle": "{BaseNeuralNetwork}",
    "description": "Deep Learning with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BaseNeuralNetwork"
      }
    ],
    "interface": false,
    "extends": [
      "@tensorscript/core~TensorScriptModelInterface"
    ],
    "implements": [
      "TensorScriptModelInterface"
    ]
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow model",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "train",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#train",
    "access": "public",
    "description": "Asynchronously trains tensorflow model",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "array of model dense layer parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns trained tensorflow model"
    },
    "override": true
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "xShape",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#xShape",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "yShape",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#yShape",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "model",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#model",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "calculate",
    "memberof": "lib/deeplearning.mjs~BaseNeuralNetwork",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deeplearning.mjs~BaseNeuralNetwork#calculate",
    "access": "public",
    "description": "Predicts new dependent variables",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "new test independent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{data: Promise}"
      ],
      "spread": false,
      "description": "returns tensorflow prediction"
    },
    "override": true
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "lib/regression.mjs",
    "content": "import { BaseNeuralNetwork, } from './deeplearning';\r\n\r\n/**\r\n * Deep Learning Regression with Tensorflow\r\n * @class DeepLearningRegression\r\n * @implements {BaseNeuralNetwork}\r\n */\r\nexport class DeepLearningRegression extends BaseNeuralNetwork {\r\n  /**\r\n   * @param {{layers:Array<Object>,compile:Object,fit:Object,layerPreference:String}} options - neural network configuration and tensorflow model hyperparameters\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties) {\r\n    const config = Object.assign({\r\n      layers: [],\r\n      layerPreference:'deep',\r\n      compile: {\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'adam',\r\n      },\r\n      fit: {\r\n        epochs: 100,\r\n        batchSize: 5,\r\n      },\r\n    }, options);\r\n    super(config, properties);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds dense layers to tensorflow regression model\r\n   * @override \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @param {Array<Object>} layers - model dense layer parameters\r\n   */\r\n  generateLayers(x_matrix, y_matrix, layers) {\r\n    const xShape = this.getInputShape(x_matrix);\r\n    const yShape = this.getInputShape(y_matrix);\r\n    const denseLayers = [];\r\n    if (layers) {\r\n      denseLayers.push(...layers);\r\n    } else if(this.settings.layerPreference==='deep') {\r\n      denseLayers.push({ units: xShape[ 1 ], inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: parseInt(Math.ceil(xShape[ 1 ] / 2), 10), kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });\r\n    } else {\r\n      denseLayers.push({ units: (xShape[ 1 ] * 2), inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });\r\n      denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });\r\n    }\r\n    this.layers = denseLayers;\r\n    denseLayers.forEach(layer => {\r\n      this.model.add(this.tf.layers.dense(layer));\r\n    });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/lib/regression.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "class",
    "name": "DeepLearningRegression",
    "memberof": "lib/regression.mjs",
    "static": true,
    "longname": "lib/regression.mjs~DeepLearningRegression",
    "access": "public",
    "export": true,
    "importPath": "@tensorscript/ts-deeplearning/lib/regression.mjs",
    "importStyle": "{DeepLearningRegression}",
    "description": "Deep Learning Regression with Tensorflow",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DeepLearningRegression"
      }
    ],
    "interface": false,
    "extends": [
      "lib/deeplearning.js~BaseNeuralNetwork"
    ],
    "implements": [
      "BaseNeuralNetwork"
    ]
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{layers:Array<Object>,compile:Object,fit:Object,layerPreference:String}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "neural network configuration and tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "generateLayers",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#generateLayers",
    "access": "public",
    "description": "Adds dense layers to tensorflow regression model",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "model dense layer parameters"
      }
    ],
    "override": true
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "layers",
    "memberof": "lib/regression.mjs~DeepLearningRegression",
    "static": false,
    "longname": "lib/regression.mjs~DeepLearningRegression#layers",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true
  },
  {
    "kind": "index",
    "content": "# @tensorscript/ts-deeplearning\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/ts-deeplearning/badge.svg?branch=master)](https://coveralls.io/github/repetere/ts-deeplearning?branch=master) [![Build Status](https://travis-ci.org/repetere/ts-deeplearning.svg?branch=master)](https://travis-ci.org/repetere/ts-deeplearning)\n\nDeep Learning Classification and Regression with Tensorflow (Clustering coming soon)\n### [Full Documentation](<https://github.com/repetere/ts-deeplearning/blob/master/docs/API.md>)\n\n### Installation\n\n```sh\n$ npm i @tensorscript/ts-deeplearning\n```\n\n### Usage\n\n#### Classification\n\nTest against the [Iris Flower Data Set](https://archive.ics.uci.edu/ml/datasets/Iris)\n\n```javascript\nimport { DeepLearningClassification, } from '@tensorscript/ts-deeplearning';\nimport ms from 'modelscript';\n\nasync function main(){\n  const irisFlowerDataCSV = await ms.csv.loadCSV('./test/mock/data/iris_data.csv');\n  const DataSet = new ms.DataSet(irisFlowerDataCSV);\n    /**\n     * encodedData = [ \n     *  { sepal_length_cm: 5.1,\n         sepal_width_cm: 3.5,\n        petal_length_cm: 1.4,\n        petal_width_cm: 0.2,\n        plant: 'Iris-setosa',\n        'plant_Iris-setosa': 1,\n        'plant_Iris-versicolor': 0,\n        'plant_Iris-virginica': 0 },\n        ...\n        { sepal_length_cm: 5.9,\n        sepal_width_cm: 3,\n        petal_length_cm: 4.2,\n        petal_width_cm: 1.5,\n        plant: 'Iris-versicolor',\n        'plant_Iris-setosa': 0,\n        'plant_Iris-versicolor': 1,\n        'plant_Iris-virginica': 0 },\n      ];\n    */\n  const encodedData = DataSet.fitColumns({\n    columns: [\n      {\n        name: 'plant',\n        options: {\n          strategy: 'onehot',\n        },\n      },\n    ],\n    returnData:true,\n  });\n  const independentVariables = [\n    'sepal_length_cm',\n    'sepal_width_cm',\n    'petal_length_cm',\n    'petal_width_cm',\n  ];\n  const dependentVariables = [\n    'plant_Iris-setosa',\n    'plant_Iris-versicolor',\n    'plant_Iris-virginica',\n  ];\n  const x_matrix = DataSet.columnMatrix(independentVariables); \n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /*\n    x_matrix = [\n      [ 5.1, 3.5, 1.4, 0.2 ],\n      [ 4.9, 3, 1.4, 0.2 ],\n      [ 4.7, 3.2, 1.3, 0.2 ],\n      ...\n    ]; \n    y_matrix = [\n      [ 1, 0, 0 ],\n      [ 1, 0, 0 ],\n      [ 1, 0, 0 ],\n      ...\n    ] \n    */\n  const input_x = [\n    [5.1, 3.5, 1.4, 0.2, ],\n    [6.3, 3.3, 6.0, 2.5, ],\n    [5.6, 3.0, 4.5, 1.5, ],\n    [5.0, 3.2, 1.2, 0.2, ],\n    [4.5, 2.3, 1.3, 0.3, ],\n  ];\n  const nnClassification = new DeepLearningClassification();\n  const nnClassificationModel = await nnClassification.train(x_matrix, y_matrix);\n  const predictions = await nnClassification.predict(input_x);\n  const answers = await nnClassification.predict(input_x, {\n    probability:false,\n  });\n  /*\n    predictions = [\n      [ 0.989512026309967, 0.010471616871654987, 0.00001649192017794121, ],\n      [ 0.0000016141033256644732, 0.054614484310150146, 0.9453839063644409, ],\n      [ 0.001930746017023921, 0.6456733345985413, 0.3523959517478943, ],\n      [ 0.9875779747962952, 0.01239941269159317, 0.00002274810685776174, ],\n      [ 0.9545140862464905, 0.04520365223288536, 0.0002823179238475859, ],\n    ];\n    answers = [\n      [ 1, 0, 0, ],\n      [ 0, 0, 1, ],\n      [ 0, 1, 0, ],\n      [ 1, 0, 0, ],\n      [ 1, 0, 0, ],\n    ];\n   */\n}\n\nmain();\n\n```\n\n#### Regression\n\nTest against the [Boston Housing Data Set](https://machinelearningmastery.com/regression-tutorial-keras-deep-learning-library-python/)\n\n```javascript\nimport { DeepLearningRegression, } from '@tensorscript/ts-deeplearning';\nimport ms from 'modelscript';\n\nfunction scaleColumnMap(columnName) {\n  return {\n    name: columnName,\n    options: {\n      strategy: 'scale',\n      scaleOptions: {\n        strategy:'standard'\n      }\n    }\n  }\n}\n\nasync function main(){\n  const housingdataCSV = await ms.csv.loadCSV('./test/mock/data/boston_housing_data.csv');\n  /*\n  housingdataCSV = [\n    { CRIM: 0.00632, ZN: 18, INDUS: 2.31, CHAS: 0, NOX: 0.538, RM: 6.575, AGE: 65.2, DIS: 4.09, RAD: 1, TAX: 296, PTRATIO: 15.3, B: 396.9, LSTAT: 4.98, MEDV: 24 },\n    { CRIM: 0.02731, ZN: 0, INDUS: 7.07, CHAS: 0, NOX: 0.469, RM: 6.421, AGE: 78.9, DIS: 4.9671, RAD: 2, TAX: 242, PTRATIO: 17.8, B: 396.9, LSTAT: 9.14, MEDV: 21.6 },\n    ...\n  ]\n  */\n  const DataSet = new ms.DataSet(housingdataCSV);\n  const independentVariables = [\n    'CRIM',\n    'ZN',\n    'INDUS',\n    'CHAS',\n    'NOX',\n    'RM',\n    'AGE',\n    'DIS',\n    'RAD',\n    'TAX',\n    'PTRATIO',\n    'B',\n    'LSTAT',\n  ];\n  const dependentVariables = [\n    'MEDV',\n  ];\n  const columns = independentVariables.concat(dependentVariables);\n  DataSet.fitColumns({\n    columns: columns.map(scaleColumnMap),\n    returnData:false,\n  });\n  const x_matrix = DataSet.columnMatrix(independentVariables);\n  const y_matrix = DataSet.columnMatrix(dependentVariables);\n  /* x_matrix = [\n    [ -0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932 ],\n    [ -0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634 ]\n    ...\n  ];\n  y_matrix = [\n    [ 0.15952778852449556 ],\n    [ -0.1014239172731213 ],\n    ...\n  ];\n  const y_vector = ms.util.pivotVector(y_matrix)[ 0 ];// not used but just illustrative\n  y_vector = [ 0.15952778852449556, -0.1014239172731213, ... ]\n    */\n  const input_x = [\n    [-0.41936692921321594, 0.2845482693404666, -1.2866362317172035, -0.272329067679207, -0.1440748547324509, 0.4132629204530747, -0.119894767215809, 0.1400749839795629, -0.981871187861867, -0.6659491794887338, -1.457557967289609, 0.4406158949991029, -1.074498970343932,],\n    [-0.41692666996409716, -0.4872401872268264, -0.5927943782429392, -0.272329067679207, -0.7395303607434242, 0.1940823874370036, 0.3668034264326209, 0.5566090495704026, -0.8670244885881488, -0.9863533804386945, -0.3027944997494681, 0.4406158949991029, -0.49195252491856634,],\n  ];\n  const nnRegression = new DeepLearningRegression();\n  const model = await nnRegression.train(x_matrix, y_matrix);\n  const predictions = await nnRegressionWide.predict(input_x); // [ [ 0.43396109342575073 ], [ 0.12437985092401505 ] ]\n  const predictions_unscaled = predictions.map(pred=>DataSet.scalers.get('MEDV').descale(pred[0])); //[ 26.523991670220486, 23.67674075943165 ]\n}\n\nmain();\n```\n\n### Testing\n\n```sh\n$ npm i\n$ npm test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Misc\n\nAs of Node 8, ES modules are still used behind a flag, when running natively as an ES module\n\n```sh\n$ node --experimental-modules my-machine-learning-script.mjs\n# Also there are native bindings that require Python 2.x, make sure if you're using Andaconda, you build with your Python 2.x bin\n$ npm i --python=/usr/bin/python\n ```\n\nLicense\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-deeplearning/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]